// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250703021025_NotificaitionsForAppointments")]
    partial class NotificaitionsForAppointments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 7, 4, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Initial consultation",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 7, 5, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Follow-up session",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 7, 4, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Family therapy",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 7, 6, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Couples counseling",
                            PatientId = 4,
                            Status = "Canceled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 7, 5, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Trauma session",
                            PatientId = 5,
                            Status = "Completed",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 7, 7, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "PTSD follow-up",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 7, 4, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Child therapy evaluation",
                            PatientId = 7,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 7, 8, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Adolescent counseling",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentDate = new DateTime(2025, 7, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Addiction counseling",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 7, 9, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Substance abuse follow-up",
                            PatientId = 3,
                            Status = "Rescheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 11,
                            AppointmentDate = new DateTime(2025, 7, 5, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Eating disorder support",
                            PatientId = 4,
                            Status = "Scheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 12,
                            AppointmentDate = new DateTime(2025, 7, 10, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Body image therapy",
                            PatientId = 5,
                            Status = "Rescheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 13,
                            AppointmentDate = new DateTime(2025, 7, 7, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Couples therapy session",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 14,
                            AppointmentDate = new DateTime(2025, 7, 11, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Relationship counseling",
                            PatientId = 7,
                            Status = "Completed",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 15,
                            AppointmentDate = new DateTime(2025, 7, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Art therapy introduction",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 16,
                            AppointmentDate = new DateTime(2025, 7, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Creative expression session",
                            PatientId = 2,
                            Status = "Completed",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 17,
                            AppointmentDate = new DateTime(2025, 7, 8, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Sports performance anxiety",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 18,
                            AppointmentDate = new DateTime(2025, 7, 13, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Competition stress management",
                            PatientId = 4,
                            Status = "Completed",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 19,
                            AppointmentDate = new DateTime(2025, 7, 9, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Grief counseling",
                            PatientId = 5,
                            Status = "Scheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 20,
                            AppointmentDate = new DateTime(2025, 7, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Bereavement support",
                            PatientId = 6,
                            Status = "Rescheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3c82b65-daec-4cfa-a377-247a3cfa91af",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9SNNOGs2jZCGkIKARPad1ANAtq9Z+7Aqcxms8wR4HWkbyVawx643xKNCE+L0ovfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a101678d-b801-4177-bbfe-a23cfa1ac008",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b06a55c-b61e-49d0-ab84-006dde3b554f",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENkliTwdXqFLT8+prc+Y7qtIp3Xe5VID3wXyd3mScPIPGaBbFbcwc2opsOkI6cF5KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29d396bd-9724-4f6d-9fbf-c48b6dd5a7e9",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc25247c-75c6-4db1-9251-aafe5b1773aa",
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELyvErKO2zJKYPpWKAMoVA4hxtIqa9O68W7JTi3TDtLSqCa/2TI1gyIim1ezFRyHEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "142b4aec-6cd8-40c8-9718-761a8fa4cafc",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4645fe35-14d8-4403-a049-b5e3a610a505",
                            Email = "therapist1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVswqtb/H+IBY7Aos6rQ/ipiuk2HBtFHUqnTW0IW45RFG7U3mf6cjjUZnZdFuWvWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f05d8850-12da-40aa-b710-0cf47397d4a1",
                            TwoFactorEnabled = false,
                            UserName = "therapist1@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc62c7d7-a6c3-4c71-baaf-4193a203a78c",
                            Email = "therapist2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST2@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBR1vBBMrzt1sDfh5stiTt8vsrDvQLlPGeL2YZVBTfg1gyYYcwyAVvo4WwDdJ3FvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "379641fc-764a-411d-a589-78a8ca0bda88",
                            TwoFactorEnabled = false,
                            UserName = "therapist2@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76b4fe32-27ce-451e-849b-68f3598f8126",
                            Email = "therapist3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST3@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHrE8pERidKkjJvhmYhcFZgqe81p9mEIK6b90byLyqYe/gQX3qaTmaT89g+r6gutA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c02c77d-c6ff-49fc-99c3-4a7c065e641f",
                            TwoFactorEnabled = false,
                            UserName = "therapist3@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae94bf31-2918-4263-8dc9-7205eee4492c",
                            Email = "therapist4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST4@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENTKdfucXwrHpFScN9/ZEBdtB4vRDKo6/zKhnYhKqCjCYxRSfpIH+Tukxrn05jAsCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "287d9384-5d52-4446-96b3-363255bdc347",
                            TwoFactorEnabled = false,
                            UserName = "therapist4@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e03df6b4-2462-489e-9a4c-ae205b8d1d7b",
                            Email = "therapist5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST5@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAmaCIW1iRkHwVxPJPIyU6kuCL3x9/rnTkVRVx28aXqEOTzU7N0b+mYgZVd4jELA/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "251f7cf2-1a20-49c4-bf34-cd436de29ee8",
                            TwoFactorEnabled = false,
                            UserName = "therapist5@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68888efc-1ed0-4c63-a2e9-667bc2b559fb",
                            Email = "therapist6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST6@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENoEmPf3JXfBR7BNTh1iSpAOh+9PvOIGSCAKO2MDdM8hhA4mlsYlp6dkOUUj2EiwiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c94401c-2d61-42b0-8fc9-9ad2cbd41a5c",
                            TwoFactorEnabled = false,
                            UserName = "therapist6@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5413dd08-099c-4b68-a177-9e05d0fef7d6",
                            Email = "therapist7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST7@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSbx96ihCDfBhwBxhleSBA/xIYDYY5KGWK7syT+ZNVPoBZhpKOQifGc5ldItSYX/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f400681e-4799-4147-90f2-daa6b96e2bb9",
                            TwoFactorEnabled = false,
                            UserName = "therapist7@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45330eff-18f2-4c8e-9831-c65eddc2ebc8",
                            Email = "therapist8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST8@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECUkyRC5nEetCfW3c/oZsc0anqrn3vabwC63l2fhkLFZbDdVI/AFi7sChKXH4iXY+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c65397b-c9a9-49ac-9104-dd1532f2d551",
                            TwoFactorEnabled = false,
                            UserName = "therapist8@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88a4867f-dd69-4f2e-b771-853f9dea06fd",
                            Email = "therapist9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST9@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECpo5W9L1123rCgqgcSL92ut86Awki0+AAx8Tq0IJt/AeVQf3Dje0vdZlUx/C4FNyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e4d5fdf-650a-4f52-b11b-46d1a2721ab9",
                            TwoFactorEnabled = false,
                            UserName = "therapist9@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8056c01c-1077-427b-b251-d82d0156163d",
                            Email = "therapist10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST10@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEYg9QOEwVIeYGmVEZirt79zDd0Qx0XxDr484DYxwoADsyiB0XtLD3rPRFDAoP2MSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea7883aa-4727-4b3b-8e20-91083191d2f5",
                            TwoFactorEnabled = false,
                            UserName = "therapist10@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec9c161c-4d9b-47c5-9ef9-1142e214a6c9",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0QZW99mLnZib3NSvQFj0VGcluIIb1VY0NPLJdsVQzkfjBzZISTnSDxHz57NWOH6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58b658e2-72b3-4360-b2e5-de67a277848e",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72298421-1acf-4fdb-94ac-6be414ace85a",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6PjRkCi//lW2Tr0O2guwf6em0yYjeySuetkd3mVkIRrct+5RZ+Sg+Now4bqwbtCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc9356cb-1763-4c72-95ac-37bc4a6fbdf8",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db5d8bdb-6dd0-424e-aee2-e94329c1e540",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3fvYgCmbwDKmfVbmgYI/0ok7pPPTWzFQjKxqBh+wTtQWvUYaEeS0XegyxdpVxWaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe5c7934-c260-4c08-a847-d9c1d8449964",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc2b4f41-aef9-4314-9ea8-6aa5da6b7abe",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGphyBj93aYky8WTLo0tOy9xoCKqO/rVha74kDdBWCPPEexkfPiQkpddFXIut1Rh8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15d452d4-49b3-4123-a2dc-1d29f8890858",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76d34cd2-ff63-486d-9ae2-dfb034b066cd",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzYJFwnaBim1YFtuGMKHZkNyqleVUFup/iUxgu8++hFJ507jLYqutyILuWofG6Z7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a42f0358-7fef-4c2c-8d2c-59be61dd6569",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de2c4fe8-d1a6-48c0-9569-c58a2533df94",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvG39LUycJIzn5H4/RcrySlZMLgup+Zim3KYvfdDmBm7ThEQhjmPYQ5++GW3EH0NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7afd669-0c95-4d86-ab7f-328d725cfe39",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "901e59a1-c547-4d73-8ba7-883140ab36b4",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJTgGDhNLy7ULIz0HAlC0HVjfWCj7dvWdaBrdHloXMQovFHOesDDKBeWBL2E0TWaxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "512dc1b0-b94a-4b95-9310-cea90b4b3ef7",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("PatientId");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Had a great day with friends",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Work stress is getting to me",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Feeling calm after meditation",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Feeling down today",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited for upcoming trip",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 8,
                            Notes = "Stressed about work deadline",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 4,
                            Notes = "Angry about argument with friend",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Exhausted from lack of sleep",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with how things are going",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 10,
                            Notes = "Feeling lonely this weekend",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about therapy progress",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 11,
                            Notes = "Confused about my feelings",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Happy about good news",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Anxious about upcoming test",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited to see family",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Calm after yoga session",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Sad about pet being sick",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Tired from work week",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with life right now",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about new treatment",
                            PatientId = 7,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodTypes");

                    b.HasData(
                        new
                        {
                            MoodTypeId = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            MoodTypeId = 2,
                            Name = "Sad"
                        },
                        new
                        {
                            MoodTypeId = 3,
                            Name = "Anxious"
                        },
                        new
                        {
                            MoodTypeId = 4,
                            Name = "Angry"
                        },
                        new
                        {
                            MoodTypeId = 5,
                            Name = "Excited"
                        },
                        new
                        {
                            MoodTypeId = 6,
                            Name = "Calm"
                        },
                        new
                        {
                            MoodTypeId = 7,
                            Name = "Tired"
                        },
                        new
                        {
                            MoodTypeId = 8,
                            Name = "Stressed"
                        },
                        new
                        {
                            MoodTypeId = 9,
                            Name = "Content"
                        },
                        new
                        {
                            MoodTypeId = 10,
                            Name = "Lonely"
                        },
                        new
                        {
                            MoodTypeId = 11,
                            Name = "Confused"
                        },
                        new
                        {
                            MoodTypeId = 12,
                            Name = "Hopeful"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            FirstName = "Alice",
                            LastName = "Smith",
                            UserId = "14"
                        },
                        new
                        {
                            PatientId = 2,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UserId = "15"
                        },
                        new
                        {
                            PatientId = 3,
                            FirstName = "Emily",
                            LastName = "Williams",
                            UserId = "16"
                        },
                        new
                        {
                            PatientId = 4,
                            FirstName = "David",
                            LastName = "Lee",
                            UserId = "17"
                        },
                        new
                        {
                            PatientId = 5,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            UserId = "18"
                        },
                        new
                        {
                            PatientId = 6,
                            FirstName = "James",
                            LastName = "Wilson",
                            UserId = "19"
                        },
                        new
                        {
                            PatientId = 7,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            Bio = "10+ years experience with anxiety disorders",
                            Email = "therapist1@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Specialization = "Cognitive Behavioral Therapy",
                            UserId = "4"
                        },
                        new
                        {
                            TherapistId = 2,
                            Bio = "Specializes in relationship counseling",
                            Email = "therapist2@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            PhoneNumber = "234-567-8901",
                            Specialization = "Family Therapy",
                            UserId = "5"
                        },
                        new
                        {
                            TherapistId = 3,
                            Bio = "Expert in PTSD treatment",
                            Email = "therapist3@example.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "345-678-9012",
                            Specialization = "Trauma Therapy",
                            UserId = "6"
                        },
                        new
                        {
                            TherapistId = 4,
                            Bio = "Works with children and adolescents",
                            Email = "therapist4@example.com",
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            PhoneNumber = "456-789-0123",
                            Specialization = "Child Psychology",
                            UserId = "7"
                        },
                        new
                        {
                            TherapistId = 5,
                            Bio = "Substance abuse specialist",
                            Email = "therapist5@example.com",
                            FirstName = "Robert",
                            LastName = "Miller",
                            PhoneNumber = "567-890-1234",
                            Specialization = "Addiction Counseling",
                            UserId = "8"
                        },
                        new
                        {
                            TherapistId = 6,
                            Bio = "Helps with body image issues",
                            Email = "therapist6@example.com",
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            PhoneNumber = "678-901-2345",
                            Specialization = "Eating Disorders",
                            UserId = "9"
                        },
                        new
                        {
                            TherapistId = 7,
                            Bio = "Relationship expert",
                            Email = "therapist7@example.com",
                            FirstName = "Thomas",
                            LastName = "Moore",
                            PhoneNumber = "789-012-3456",
                            Specialization = "Couples Therapy",
                            UserId = "10"
                        },
                        new
                        {
                            TherapistId = 8,
                            Bio = "Creative approaches to healing",
                            Email = "therapist8@example.com",
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            PhoneNumber = "890-123-4567",
                            Specialization = "Art Therapy",
                            UserId = "11"
                        },
                        new
                        {
                            TherapistId = 9,
                            Bio = "Performance and mental health",
                            Email = "therapist9@example.com",
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            PhoneNumber = "901-234-5678",
                            Specialization = "Sports Psychology",
                            UserId = "12"
                        },
                        new
                        {
                            TherapistId = 10,
                            Bio = "Helping with loss and bereavement",
                            Email = "therapist10@example.com",
                            FirstName = "Emma",
                            LastName = "Thomas",
                            PhoneNumber = "012-345-6789",
                            Specialization = "Grief Counseling",
                            UserId = "13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.HasOne("MentalHealthApp.Models.MoodType", "Mood")
                        .WithMany("MoodEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("MoodEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
