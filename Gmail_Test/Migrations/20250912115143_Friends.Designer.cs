// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250912115143_Friends")]
    partial class Friends
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "f21b6e53-294d-4ee9-86d6-7c4d30cd25fa",
                            CurrentStreak = 0,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGtojD/oB5pT+ziUa5NKCK+DjtVM9D/wW2p8dQRT9zT15tnVT6gjWPTGpFUeGWiNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "916c7a8e-409b-424a-b6f2-5326dc41dac3",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "d2b7a345-d691-466b-858a-9ff8c560458d",
                            CurrentStreak = 0,
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmpstxecI6BfVQTjP2vjY4f8zWbG9l9s0lPH+vacrB+tkvV/DpEsEl4LcGArRiQ1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f05c7cbd-2ed2-4735-b46c-b3501a6b0d30",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "28369112-6990-447b-a699-c710799cca10",
                            CurrentStreak = 0,
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJArF24q+PYuPKSAQ/WxQ0dEXc3liYa5TPGfyGdprHtlGCEKhD6yDElCcM43ICMdDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abc29d32-adf9-49f1-80ad-9349b45fa4e4",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "4ffc7a95-5fda-460d-8ed1-becff3ad8917",
                            CurrentStreak = 1,
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LongestStreak = 2,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOKel436dU549H+dPm8UNzdeG0VdRtic9eITWBESq8s12WAGA2FH1C5tjyQX99dsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db4fd83c-20f0-41e1-810c-1652b55cd812",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "5aa94900-a36a-4fa2-96d4-e77fb5aa25c0",
                            CurrentStreak = 1,
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsIHeoI/Pk2jf87DWxv+hZV0Rr7N9zuke6yTB/ChBBtrvFtpSPhPc9Di8wa3/vE/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d206539-6b3f-4270-87f7-2f889a344c13",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "995d25d8-3733-48e0-8f99-fecbaa1983b1",
                            CurrentStreak = 1,
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastMoodCheckIn = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Williams",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENoGHyzN6WmKozf2Utti7faBgrAq28rjmoXB8SW6CLHGknGv4HWBkrxhrfKX3/R74g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cf9537a-d579-4d8c-9605-83dd949d18c9",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "4f9cd3eb-0299-4e4c-bf38-bd3aca440e91",
                            CurrentStreak = 1,
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Lee",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZFbP2pFta4EPK80Yls1I7QoNJ4OSjD04uvD3FbA5pqIOYcKTF1Gj+lCHJAEP9+oA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "274e75ca-00b3-4a09-8060-280629114092",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "3915716f-1a28-488b-bcdc-2f12e21d7750",
                            CurrentStreak = 1,
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastMoodCheckIn = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjpjkltzACuzJtPX2AYF48h7m4VbOBrTm2KJyuKEVWrxiwmvd2cLmnpS4vElSpGcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7b676f6-74e0-443e-a0c3-092b1c8a5e7b",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "9f0f667b-9fd1-4c45-a6fc-0621fdcf04ae",
                            CurrentStreak = 1,
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1DmRAze3z+2dNndkUnql22upHN5+uuxLZS77IuLshy+xm9mcSkektKDTrsPEqb0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee00e71b-88bf-4f72-a397-8eada711f651",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "6c060ae2-1efd-4a53-90e9-2074d9b14bad",
                            CurrentStreak = 1,
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlTFF0KWMDyGCilXgiw3HI5weHyQHf65UT8ytB0WC10SBq/MxBHzK6q+o/x1emLrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07219d63-9554-4280-96fe-aed744596d1f",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Had a great day with friends",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Work stress is getting to me",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Feeling calm after meditation",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 9, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling down today",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited for upcoming trip",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Stressed about work deadline",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 3,
                            Notes = "Angry about argument with friend",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Exhausted from lack of sleep",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with how things are going",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling lonely this weekend",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about therapy progress",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Confused about my feelings",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Happy about good news",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Anxious about upcoming test",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 9, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited to see family",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Calm after yoga session",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Sad about pet being sick",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Tired from work week",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with life right now",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about new treatment",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ConversationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 10, 23, 51, 42, 392, DateTimeKind.Local).AddTicks(125),
                            Description = "Want to support our cause but rock some swag? This is the perfect choice for you!",
                            ImageUrl = "ShantiShirtMerch.png",
                            IsPrivate = false,
                            Name = "Shanti Black Tee",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 6, 23, 51, 42, 392, DateTimeKind.Local).AddTicks(129),
                            Description = "Get a fun plushy to be your companion!",
                            ImageUrl = "ShantiPlushy.jpg",
                            IsPrivate = false,
                            Name = "Shanti Plushy",
                            Price = 25m
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 7, 23, 51, 42, 392, DateTimeKind.Local).AddTicks(134),
                            Description = "A bestselling book with practical tips for mental wellness.",
                            ImageUrl = "Wellbook.jpg",
                            IsPrivate = false,
                            Name = "Wellness Book - 'Calm Your Mind'",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 8, 29, 23, 51, 42, 392, DateTimeKind.Local).AddTicks(140),
                            Description = "Includes stress balls, aroma oils, and calming teas.",
                            ImageUrl = "default-product.png",
                            IsPrivate = false,
                            Name = "Stress Relief Kit",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
