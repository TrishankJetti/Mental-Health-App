// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20251003014738_planner")]
    partial class planner
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "6cbdee09-1527-4f70-84c4-00a5fa33b3e1",
                            CurrentStreak = 0,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMo3pzzbqbBrARNvd9hCrDmtcSI7Z5exczC750DzvIXx5z1vUKXu9y1Ct6IL6AbKyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ca4e25d-d499-4902-a5dc-f130522b2c6d",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "b568e0c9-9294-4fbd-8e3f-2a6baf4d194d",
                            CurrentStreak = 0,
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBPodot6NlzZ8k8i8jFW2WiJtFusF9Y99EnytAjhH61Ph5/ze/V9xT96akzSRe1zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc32535e-2448-447b-a6f9-698ef2bb47ae",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "2d79ee28-e308-4186-99d2-f80150d7224b",
                            CurrentStreak = 0,
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIlOCpgFU03pCQUQh0hPTQlfm15oWsYTu4WBXQSepAx0DDk2czgQWpJ0aCraYVT06Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fec26a8-9146-4c68-973d-b5b7133c82d8",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "7afc043d-4f87-449a-bf8b-70ddac4e9dc1",
                            CurrentStreak = 1,
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastMoodCheckIn = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LongestStreak = 2,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDx66lx3EA20WhlgMZhDLg2Vo6sRGmu4zrM1oxVQdXjU3/oCjhE9RJTHI8zaWVtNpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5952202c-cfb6-4c98-aa0c-ade74672ab03",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "3e18850b-1a21-4e9d-82fe-2b7823c65efa",
                            CurrentStreak = 1,
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastMoodCheckIn = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENUSBGoZTE8J4gBAVw4w5Aim51BEk5sWnGc4UHKDYAmml+g9+zlnEa7KFVyXVPsnzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24240812-0d15-45f7-8c9f-2d7c54ef2aff",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "da7c201a-636b-42e3-996c-ed1738a4aff9",
                            CurrentStreak = 1,
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastMoodCheckIn = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Williams",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEORAcHNvTAJoHkZSNCaU7XkZ0wPNjuF1NQlfIF/MEqm7CsTWL1yGqE1IOei3zmuStw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b26a2134-0979-4ae6-b3bc-8f6aca786cbd",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "91be1e0a-e5dc-4e7b-a3c4-057729ef3c44",
                            CurrentStreak = 1,
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastMoodCheckIn = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Lee",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEALhXF3gWFzPiZTQyoMl3Z5yhVy6dkxCy3z2XjErwpwKKTCgwgOy0XmDRVbnk9dySg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2f6be4a-c15b-4467-b2dd-c0dd36dda1bb",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "43ea1a1a-b105-4173-947c-a18dc968d434",
                            CurrentStreak = 1,
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastMoodCheckIn = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzbn9lnN/UfSXi3cB6wCbsVQG15VzRMzH2GJXQ2yO+IIn90Nyp4tj/fFOKNseEtFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ce2fd12-83bf-4ada-a2ee-14ba8a7c0f43",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "322842e9-461d-42b8-acb1-2db99c1fdd60",
                            CurrentStreak = 1,
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastMoodCheckIn = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC7wOz3CTmywx/GrHkwHEsOy3O17DA3n8hAAPROAvNfSmtjJTIRh6Fw1PCX7vTc0dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79cde222-1b16-4492-bb5c-5e8a369007b6",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "470a9db7-8fa6-453a-9cba-5741bce3a0ac",
                            CurrentStreak = 1,
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastMoodCheckIn = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHq0cfA4XqQx5NupZDuR/h59oX74WZlT2LkuakEWL98xgBFHiubL6b/+lDTcf2GSJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54b3b290-fc34-4a23-b920-2dc5983ace85",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddresseeId = "15",
                            CreatedAt = new DateTime(2025, 9, 23, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5369),
                            RequesterId = "14",
                            RespondedAt = new DateTime(2025, 9, 24, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5391),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AddresseeId = "16",
                            CreatedAt = new DateTime(2025, 9, 25, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5397),
                            RequesterId = "14",
                            RespondedAt = new DateTime(2025, 9, 26, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5399),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AddresseeId = "14",
                            CreatedAt = new DateTime(2025, 9, 28, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5404),
                            RequesterId = "17",
                            RespondedAt = new DateTime(2025, 9, 29, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5406),
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AddresseeId = "17",
                            CreatedAt = new DateTime(2025, 9, 21, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5411),
                            RequesterId = "15",
                            RespondedAt = new DateTime(2025, 9, 22, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5413),
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            AddresseeId = "15",
                            CreatedAt = new DateTime(2025, 10, 1, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5417),
                            RequesterId = "18",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            AddresseeId = "19",
                            CreatedAt = new DateTime(2025, 9, 18, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5422),
                            RequesterId = "16",
                            RespondedAt = new DateTime(2025, 9, 19, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5425),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            AddresseeId = "16",
                            CreatedAt = new DateTime(2025, 9, 26, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5430),
                            RequesterId = "20",
                            RespondedAt = new DateTime(2025, 9, 27, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5432),
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            AddresseeId = "19",
                            CreatedAt = new DateTime(2025, 9, 24, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5436),
                            RequesterId = "17",
                            RespondedAt = new DateTime(2025, 9, 25, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5439),
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            AddresseeId = "20",
                            CreatedAt = new DateTime(2025, 9, 22, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5443),
                            RequesterId = "18",
                            RespondedAt = new DateTime(2025, 9, 23, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5446),
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            AddresseeId = "20",
                            CreatedAt = new DateTime(2025, 9, 27, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5450),
                            RequesterId = "19",
                            RespondedAt = new DateTime(2025, 9, 28, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5452),
                            Status = 1
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hey Mike! How are you feeling today?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 1, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5497)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Hi Alice! I'm doing okay, just a bit stressed about work. How about you?",
                            IsRead = true,
                            ReceiverId = "14",
                            SenderId = "15",
                            SentAt = new DateTime(2025, 10, 1, 16, 47, 37, 689, DateTimeKind.Local).AddTicks(5506)
                        },
                        new
                        {
                            Id = 3,
                            Content = "I understand. Work has been tough for me too. Want to chat about it?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 1, 18, 47, 37, 689, DateTimeKind.Local).AddTicks(5511)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Emily! I saw your mood entry from yesterday. Are you doing better today?",
                            IsRead = true,
                            ReceiverId = "16",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 2, 2, 47, 37, 689, DateTimeKind.Local).AddTicks(5516)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Thanks for checking in, Alice. I'm feeling much better today! 😊",
                            IsRead = true,
                            ReceiverId = "14",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 2, 4, 47, 37, 689, DateTimeKind.Local).AddTicks(5520)
                        },
                        new
                        {
                            Id = 6,
                            Content = "David, how do you handle stress? I'm really struggling this week.",
                            IsRead = true,
                            ReceiverId = "17",
                            SenderId = "15",
                            SentAt = new DateTime(2025, 9, 30, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5525)
                        },
                        new
                        {
                            Id = 7,
                            Content = "I've been using the breathing exercises on the app. They really help! Want to try them together?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "17",
                            SentAt = new DateTime(2025, 9, 30, 16, 47, 37, 689, DateTimeKind.Local).AddTicks(5529)
                        },
                        new
                        {
                            Id = 8,
                            Content = "James, I noticed we both had rough days yesterday. Want to support each other today?",
                            IsRead = true,
                            ReceiverId = "19",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 2, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5534)
                        },
                        new
                        {
                            Id = 9,
                            Content = "That would be great, Emily. It helps to know we're not alone in this.",
                            IsRead = true,
                            ReceiverId = "16",
                            SenderId = "19",
                            SentAt = new DateTime(2025, 10, 2, 16, 47, 37, 689, DateTimeKind.Local).AddTicks(5541)
                        },
                        new
                        {
                            Id = 10,
                            Content = "Olivia! I'm so proud of your mood streak! 🎉",
                            IsRead = false,
                            ReceiverId = "20",
                            SenderId = "18",
                            SentAt = new DateTime(2025, 10, 3, 2, 47, 37, 689, DateTimeKind.Local).AddTicks(5545)
                        },
                        new
                        {
                            Id = 11,
                            Content = "How's your pet doing, James? I've been thinking about you both.",
                            IsRead = false,
                            ReceiverId = "19",
                            SenderId = "17",
                            SentAt = new DateTime(2025, 10, 3, 8, 47, 37, 689, DateTimeKind.Local).AddTicks(5550)
                        },
                        new
                        {
                            Id = 12,
                            Content = "Remember to use the breathing exercise if you feel overwhelmed!",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 3, 11, 47, 37, 689, DateTimeKind.Local).AddTicks(5555)
                        },
                        new
                        {
                            Id = 13,
                            Content = "Thanks for being such a good friend, Alice. It means a lot.",
                            IsRead = false,
                            ReceiverId = "14",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 3, 13, 47, 37, 689, DateTimeKind.Local).AddTicks(5559)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Had a great day with friends",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Work stress is getting to me",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Feeling calm after meditation",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling down today",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited for upcoming trip",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Stressed about work deadline",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 9, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 3,
                            Notes = "Angry about argument with friend",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Exhausted from lack of sleep",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with how things are going",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 9, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling lonely this weekend",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about therapy progress",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Confused about my feelings",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Happy about good news",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Anxious about upcoming test",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited to see family",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Calm after yoga session",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Sad about pet being sick",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 9, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Tired from work week",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with life right now",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about new treatment",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ConversationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5613),
                            IsRead = false,
                            Message = "Sophia sent you a friend request",
                            SenderId = "18",
                            UserId = "15"
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 10, 3, 2, 47, 37, 689, DateTimeKind.Local).AddTicks(5618),
                            IsRead = false,
                            Message = "New message from Sophia",
                            SenderId = "18",
                            UserId = "20"
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 10, 3, 8, 47, 37, 689, DateTimeKind.Local).AddTicks(5622),
                            IsRead = false,
                            Message = "New message from David",
                            SenderId = "17",
                            UserId = "19"
                        },
                        new
                        {
                            NotificationId = 4,
                            CreatedAt = new DateTime(2025, 10, 3, 13, 47, 37, 689, DateTimeKind.Local).AddTicks(5683),
                            IsRead = false,
                            Message = "New message from Emily",
                            SenderId = "16",
                            UserId = "14"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.PlannerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlannerEvents");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 10, 1, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5299),
                            Description = "Want to support our cause but rock some swag? This is the perfect choice for you!",
                            ImageUrl = "ShantiShirtMerch.png",
                            IsPrivate = false,
                            Name = "Shanti Black Tee",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 27, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5305),
                            Description = "Get a fun plushy to be your companion!",
                            ImageUrl = "ShantiPlushy.jpg",
                            IsPrivate = false,
                            Name = "Shanti Plushy",
                            Price = 25m
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 28, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5312),
                            Description = "A bestselling book with practical tips for mental wellness.",
                            ImageUrl = "Wellbook.jpg",
                            IsPrivate = false,
                            Name = "Wellness Book - 'Calm Your Mind'",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 9, 19, 14, 47, 37, 689, DateTimeKind.Local).AddTicks(5317),
                            Description = "Includes stress balls, aroma oils, and calming teas.",
                            ImageUrl = "default-product.png",
                            IsPrivate = false,
                            Name = "Stress Relief Kit",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthApp.Models.PlannerEvent", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
