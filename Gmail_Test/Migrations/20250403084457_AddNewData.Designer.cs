// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250403084457_AddNewData")]
    partial class AddNewData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 4, 4, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Initial consultation",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 4, 5, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Follow-up session",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 4, 4, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Family therapy",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 4, 6, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Couples counseling",
                            PatientId = 4,
                            Status = "Canceled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 4, 5, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Trauma session",
                            PatientId = 5,
                            Status = "Completed",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 4, 7, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "PTSD follow-up",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 4, 4, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Child therapy evaluation",
                            PatientId = 7,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 4, 8, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Adolescent counseling",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentDate = new DateTime(2025, 4, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Addiction counseling",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 4, 9, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Substance abuse follow-up",
                            PatientId = 3,
                            Status = "Rescheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 11,
                            AppointmentDate = new DateTime(2025, 4, 5, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Eating disorder support",
                            PatientId = 4,
                            Status = "Scheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 12,
                            AppointmentDate = new DateTime(2025, 4, 10, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Body image therapy",
                            PatientId = 5,
                            Status = "Rescheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 13,
                            AppointmentDate = new DateTime(2025, 4, 7, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Couples therapy session",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 14,
                            AppointmentDate = new DateTime(2025, 4, 11, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Relationship counseling",
                            PatientId = 7,
                            Status = "Completed",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 15,
                            AppointmentDate = new DateTime(2025, 4, 6, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Art therapy introduction",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 16,
                            AppointmentDate = new DateTime(2025, 4, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Creative expression session",
                            PatientId = 2,
                            Status = "Completed",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 17,
                            AppointmentDate = new DateTime(2025, 4, 8, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Sports performance anxiety",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 18,
                            AppointmentDate = new DateTime(2025, 4, 13, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Competition stress management",
                            PatientId = 4,
                            Status = "Completed",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 19,
                            AppointmentDate = new DateTime(2025, 4, 9, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Grief counseling",
                            PatientId = 5,
                            Status = "Scheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 20,
                            AppointmentDate = new DateTime(2025, 4, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Bereavement support",
                            PatientId = 6,
                            Status = "Rescheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e5719ca-6f76-4720-a1c7-143d8f5c6d56",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4C6uGoBOkWc41dUT3nn80SPbKm/GBX00CR0J0JZin6xDlYauZqSdEVFUs5W/g7hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7b45051-3fd7-4586-8856-f3b45fdb5bf1",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8751e0e-5ff2-4337-bbe5-3c55f8358ff0",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDDgQbtn2ZGnXHJqnmfDdmD302O2y8Qo7XzECEGNf8ZC3FC5EnBvyHAPjz3sTCpVng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "319d6081-083d-42d9-b53c-0caeb80239d2",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7031f7d-c615-4447-b859-4c5eb679eb21",
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIV+opWINubiIJpWDunPYI1Kw6WT3lamYkxnF//SCZuXMnSnKEO/wGw4Sd1wmMoAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60f0dcf4-e7b0-480e-b224-9e6e414af5a7",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3176414-86ea-4b99-b6bf-b39a9c5bbec5",
                            Email = "therapist1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECe8OxoMYQUHfXbXjFZSzU+tVS9yu7wP8mNUPoIW9oVThyuh7jaih9/6rOWsfAIopQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d85d7f31-3723-4b1b-86e3-8b0ccdba4b94",
                            TwoFactorEnabled = false,
                            UserName = "therapist1@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f46edfd0-4278-49e1-8dce-125932edb130",
                            Email = "therapist2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST2@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAldvBrgWjwaxYJ+tn7kOGkE1YqGyo3QSb905M2GGALlXK/Ptddz1PxTnSB2PJIUnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c79701b3-0d95-433e-92fc-02f687b55ec5",
                            TwoFactorEnabled = false,
                            UserName = "therapist2@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e5801ce-e442-4e17-a773-ad7d51d911c6",
                            Email = "therapist3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST3@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECouu/ko/7Kew+ZSXjRHl4Cs6PGvB7yToTIwFRw4Ef7zOlsDRXaZ/3JX9rKceA66Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9aad5c88-d761-4f72-a8f9-6cbe5eb282b0",
                            TwoFactorEnabled = false,
                            UserName = "therapist3@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9578c4c-024a-42e7-b2a0-ca69257bb06d",
                            Email = "therapist4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST4@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL750AgUQrbuuHimc39hy8Xatrc0f9jafH7uUDYOv96TZ4CwYLsybcGVZXhNxLRzOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "766f604a-49e7-427d-b9a5-cabac23f0830",
                            TwoFactorEnabled = false,
                            UserName = "therapist4@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "addece5d-bb52-496a-bc35-7a7f0ab0e8b0",
                            Email = "therapist5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST5@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7b59yEkbxOYe8fBNnjhWGBhhoBaB07+c1HqcyB+cc66hDbXtoF67QVnEgi1VbVPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5839ebb-cd42-44fa-888b-682d96412a77",
                            TwoFactorEnabled = false,
                            UserName = "therapist5@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd4e4b2e-ff68-4577-843e-e9569b976d81",
                            Email = "therapist6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST6@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKutn2hJMNtNyc+ehEp8KEEQYUSASYAPCQkcTiqzbGXDRFYqOcVfU58uoYoTYKpDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b79dc44-e1d6-4063-9cdc-afcce3dea243",
                            TwoFactorEnabled = false,
                            UserName = "therapist6@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60d437a3-1e8e-45ec-9ee4-51cc6ba2d7d8",
                            Email = "therapist7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST7@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmVazYXmeqkjxd9Jil43qff0nXBXrANE66E6fTBNbJDzSGN2WerfXBz19LMRHd7jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87fd5109-2cc0-4327-970c-319b9d59da5c",
                            TwoFactorEnabled = false,
                            UserName = "therapist7@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53196660-1b59-46bd-bec4-2a46bfdefd1f",
                            Email = "therapist8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST8@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuvZQHb+T4NRU1PQpSz4n5hwyrBfrMQozO4QBCfRzO6wgaZ8ipxWQh/zzD0nEP5Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be298827-398b-4585-a3c4-910734e2ec65",
                            TwoFactorEnabled = false,
                            UserName = "therapist8@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e685f157-1f02-47e9-a632-65d5ec0dd535",
                            Email = "therapist9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST9@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMa60Is/BicXBB2oREkRtkMmszK1y7fpxnoGcwFcPZtK8bz4INiKWR3SBL4mINOUKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa340277-53f9-4d95-baf4-51516cde6203",
                            TwoFactorEnabled = false,
                            UserName = "therapist9@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cba7358f-fde2-44d2-9fcf-566a25cac348",
                            Email = "therapist10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST10@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPBJSfD6sJkvn1ng6q/YzF7n0ZrARdXS0lac+XYSFN24btmTqCPQfkBmbU2NecanBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d15b42c9-86d1-4c7a-b127-683412925545",
                            TwoFactorEnabled = false,
                            UserName = "therapist10@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "189940e0-c344-499e-8548-0bc3fc65616d",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEANxsFcNuSrpnkwGWOKzrjbZ25oDfDDl2Y0WIkiMoAXvLMonLoBXU6jQ2wzDoA3kSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95335ac7-6ebc-4b01-93d8-80fe37f4643e",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65ceead3-99d0-49c5-8627-df554839a6bb",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNi3MovsI1pyIDUfaOenCc+AGCYFxSpRSGvYsjot+foFuOEFLRgIGGNOWN0ZCEdKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a98daa73-78f8-4a69-8473-a79efcc8c5cc",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdd36fc2-efe7-4706-afd0-4f43f7ec4dd1",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKa6r7lz4h7gxroS8rE0cOoav/xtbYPZyfPDH7EAtIvfO4GV/NuxSED7Pp600WkaEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c6a3f97-0db6-4214-a36c-4f2a6813d21e",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eade8162-cae3-4d20-a259-875b070cd121",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjgCinpxHJoDrtu9AYrJ7EoPyCtibp5OYw4SXuUDSmncASa5CNaXdSw5eGKkaxn7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38948475-f8e2-45c4-aacc-492a784ac789",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90412526-1342-4453-872e-8bc1b8fa5043",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7FXHEa9rVKoiexo1uXSE0/x2yaSfBUGXTwmtDsZ3UlcPJx3Il3UBZmT+uid0HLwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3c4fd81-e001-482d-a664-fe4b2a26f92d",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82998f1e-68fc-4aee-895b-cb979a830774",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED288QGz6lXXTJpsK9+k7jHUQU1U0JUqSG+pB61pyMYIRnHOBMla3LS7O3zk5T/PSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e991eefd-8ee6-4aa5-93b0-9f8fe85d1c90",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3f76e1d-e3ee-4806-b69a-9e01cbc3732e",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2cYCoicEEeyI7eEa/WdOmUe087MWPiohyjB2zvpPY2bmwnXQ1xpAyUEOjhzJBhiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cf4ab2f-b952-4031-a351-86cc2c41179c",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("PatientId");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Had a great day with friends",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Work stress is getting to me",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Feeling calm after meditation",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 3, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Feeling down today",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited for upcoming trip",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 8,
                            Notes = "Stressed about work deadline",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 3, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 4,
                            Notes = "Angry about argument with friend",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Exhausted from lack of sleep",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with how things are going",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 10,
                            Notes = "Feeling lonely this weekend",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about therapy progress",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 11,
                            Notes = "Confused about my feelings",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Happy about good news",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Anxious about upcoming test",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 3, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited to see family",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Calm after yoga session",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Sad about pet being sick",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 3, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Tired from work week",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with life right now",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about new treatment",
                            PatientId = 7,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodTypes");

                    b.HasData(
                        new
                        {
                            MoodTypeId = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            MoodTypeId = 2,
                            Name = "Sad"
                        },
                        new
                        {
                            MoodTypeId = 3,
                            Name = "Anxious"
                        },
                        new
                        {
                            MoodTypeId = 4,
                            Name = "Angry"
                        },
                        new
                        {
                            MoodTypeId = 5,
                            Name = "Excited"
                        },
                        new
                        {
                            MoodTypeId = 6,
                            Name = "Calm"
                        },
                        new
                        {
                            MoodTypeId = 7,
                            Name = "Tired"
                        },
                        new
                        {
                            MoodTypeId = 8,
                            Name = "Stressed"
                        },
                        new
                        {
                            MoodTypeId = 9,
                            Name = "Content"
                        },
                        new
                        {
                            MoodTypeId = 10,
                            Name = "Lonely"
                        },
                        new
                        {
                            MoodTypeId = 11,
                            Name = "Confused"
                        },
                        new
                        {
                            MoodTypeId = 12,
                            Name = "Hopeful"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            FirstName = "Alice",
                            LastName = "Smith",
                            UserId = "14"
                        },
                        new
                        {
                            PatientId = 2,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UserId = "15"
                        },
                        new
                        {
                            PatientId = 3,
                            FirstName = "Emily",
                            LastName = "Williams",
                            UserId = "16"
                        },
                        new
                        {
                            PatientId = 4,
                            FirstName = "David",
                            LastName = "Lee",
                            UserId = "17"
                        },
                        new
                        {
                            PatientId = 5,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            UserId = "18"
                        },
                        new
                        {
                            PatientId = 6,
                            FirstName = "James",
                            LastName = "Wilson",
                            UserId = "19"
                        },
                        new
                        {
                            PatientId = 7,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            Bio = "10+ years experience with anxiety disorders",
                            Email = "therapist1@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Specialization = "Cognitive Behavioral Therapy",
                            UserId = "4"
                        },
                        new
                        {
                            TherapistId = 2,
                            Bio = "Specializes in relationship counseling",
                            Email = "therapist2@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            PhoneNumber = "234-567-8901",
                            Specialization = "Family Therapy",
                            UserId = "5"
                        },
                        new
                        {
                            TherapistId = 3,
                            Bio = "Expert in PTSD treatment",
                            Email = "therapist3@example.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "345-678-9012",
                            Specialization = "Trauma Therapy",
                            UserId = "6"
                        },
                        new
                        {
                            TherapistId = 4,
                            Bio = "Works with children and adolescents",
                            Email = "therapist4@example.com",
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            PhoneNumber = "456-789-0123",
                            Specialization = "Child Psychology",
                            UserId = "7"
                        },
                        new
                        {
                            TherapistId = 5,
                            Bio = "Substance abuse specialist",
                            Email = "therapist5@example.com",
                            FirstName = "Robert",
                            LastName = "Miller",
                            PhoneNumber = "567-890-1234",
                            Specialization = "Addiction Counseling",
                            UserId = "8"
                        },
                        new
                        {
                            TherapistId = 6,
                            Bio = "Helps with body image issues",
                            Email = "therapist6@example.com",
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            PhoneNumber = "678-901-2345",
                            Specialization = "Eating Disorders",
                            UserId = "9"
                        },
                        new
                        {
                            TherapistId = 7,
                            Bio = "Relationship expert",
                            Email = "therapist7@example.com",
                            FirstName = "Thomas",
                            LastName = "Moore",
                            PhoneNumber = "789-012-3456",
                            Specialization = "Couples Therapy",
                            UserId = "10"
                        },
                        new
                        {
                            TherapistId = 8,
                            Bio = "Creative approaches to healing",
                            Email = "therapist8@example.com",
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            PhoneNumber = "890-123-4567",
                            Specialization = "Art Therapy",
                            UserId = "11"
                        },
                        new
                        {
                            TherapistId = 9,
                            Bio = "Performance and mental health",
                            Email = "therapist9@example.com",
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            PhoneNumber = "901-234-5678",
                            Specialization = "Sports Psychology",
                            UserId = "12"
                        },
                        new
                        {
                            TherapistId = 10,
                            Bio = "Helping with loss and bereavement",
                            Email = "therapist10@example.com",
                            FirstName = "Emma",
                            LastName = "Thomas",
                            PhoneNumber = "012-345-6789",
                            Specialization = "Grief Counseling",
                            UserId = "13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.HasOne("MentalHealthApp.Models.MoodType", "Mood")
                        .WithMany()
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("MoodEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
