// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250726090112_Pfp")]
    partial class Pfp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 7, 27, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Initial consultation",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 7, 28, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Follow-up session",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 7, 27, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Family therapy",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 7, 29, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Couples counseling",
                            PatientId = 4,
                            Status = "Canceled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 7, 28, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Trauma session",
                            PatientId = 5,
                            Status = "Completed",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 7, 30, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "PTSD follow-up",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 7, 27, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Child therapy evaluation",
                            PatientId = 7,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 7, 31, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Adolescent counseling",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentDate = new DateTime(2025, 7, 29, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Addiction counseling",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 8, 1, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Substance abuse follow-up",
                            PatientId = 3,
                            Status = "Rescheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 11,
                            AppointmentDate = new DateTime(2025, 7, 28, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Eating disorder support",
                            PatientId = 4,
                            Status = "Scheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 12,
                            AppointmentDate = new DateTime(2025, 8, 2, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Body image therapy",
                            PatientId = 5,
                            Status = "Rescheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 13,
                            AppointmentDate = new DateTime(2025, 7, 30, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Couples therapy session",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 14,
                            AppointmentDate = new DateTime(2025, 8, 3, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Relationship counseling",
                            PatientId = 7,
                            Status = "Completed",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 15,
                            AppointmentDate = new DateTime(2025, 7, 29, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Art therapy introduction",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 16,
                            AppointmentDate = new DateTime(2025, 8, 4, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Creative expression session",
                            PatientId = 2,
                            Status = "Completed",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 17,
                            AppointmentDate = new DateTime(2025, 7, 31, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Sports performance anxiety",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 18,
                            AppointmentDate = new DateTime(2025, 8, 5, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Competition stress management",
                            PatientId = 4,
                            Status = "Completed",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 19,
                            AppointmentDate = new DateTime(2025, 8, 1, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Grief counseling",
                            PatientId = 5,
                            Status = "Scheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 20,
                            AppointmentDate = new DateTime(2025, 8, 6, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Bereavement support",
                            PatientId = 6,
                            Status = "Rescheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d08b7e00-1ea2-49bf-8e4b-d5a887061a2c",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmonzkPlfjydMSDHlktN9cPjOWDO/Mm6MSe2KOpjNUK/y4/+AlXW75RN5pbbXcm8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37d27963-5dc8-4a85-915d-a49fdcf06190",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f548b4c-b3e7-419c-b6f5-204d276f1500",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELTXWkK8LgJYmw0aGy9zZROESfhzngQvuyD85/HzKcDQtB8XR1A6RyuqwFWD2Fe/GA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13844153-79d3-40d2-8496-2d8c871a4bce",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b01dcc9-e992-401b-b263-bef1a6b8791e",
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB24XePD5wZAdXYaANjQYenaD6R+V8uBLK6jd9bYotm6oK2yH+/NNvXK56riSzK+1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddd6a1c5-43b9-4929-8436-dc071dc3651b",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ceb7d14-fa7c-4632-8eba-ed79f74a8dc7",
                            Email = "therapist1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/X25nWazicbmkfEIEc+Umq8o4qmaSi0CflL2JNrCkYTHP1uD3WcOdp/PL4xihJqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bbf5f7e-0c65-4d4d-bdc2-f33eb5afce79",
                            TwoFactorEnabled = false,
                            UserName = "therapist1@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d95578f-875b-43df-9a04-0cabdeb90ebf",
                            Email = "therapist2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST2@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHdvFJeKSzCES/n3haPXycajU/GuoVJRAQUE3+iI3K4vGdbL/2cVfe/jc69P8oZv/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "406381a1-0121-4c7b-b6e2-2017c61b776d",
                            TwoFactorEnabled = false,
                            UserName = "therapist2@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "863abfb6-913b-4da2-9c5c-31c6a9c928e4",
                            Email = "therapist3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST3@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAmy78ZOUgdca/wf/cjjk3Eef+3PGikOg8RhNGtJ/BNLvCCejVc3R1lr++ghhxRWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aabfd901-3909-49fb-ba52-ad14008d5f98",
                            TwoFactorEnabled = false,
                            UserName = "therapist3@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35a29d9a-c376-4488-b314-11e041084167",
                            Email = "therapist4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST4@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9w9tYVTXhz6pmPRHDAJpcGixgKmZcGkHmTe5Teicx0TKTUxEtHLmAETSgghNwWKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb5ad3f3-60cb-4f17-a297-f4b9130d38ad",
                            TwoFactorEnabled = false,
                            UserName = "therapist4@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e54cbd52-6f58-4bd0-9399-7845847d728b",
                            Email = "therapist5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST5@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDh67vMeRkP0GjbTBiuDeoKiAwftlmFKIsKTpAQn9Vx4g2es5kC7EEKDEfS5nDynw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea9ebc61-3b21-437c-9024-1bf05068497a",
                            TwoFactorEnabled = false,
                            UserName = "therapist5@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d08767d-f9d0-4011-9f0a-c268d9d42e82",
                            Email = "therapist6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST6@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECV+LQg3SVuH4kZCngfHxLOyRkIMIaRNaI0jt4aBMzs+91G6ojim25fQIwhB1coO6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00eb59b8-6727-4180-87c0-b5454feb0f6e",
                            TwoFactorEnabled = false,
                            UserName = "therapist6@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51eeb074-9518-466b-869f-3d169f0cc649",
                            Email = "therapist7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST7@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKrNCAvX1PWy8zP7o8NHEoi4famcoKEj8lfEVD8L4e37P0DLyVcrnoIjZoQZMUH9DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "611ad3c8-a9d7-4f26-a50f-d114ba82a3a2",
                            TwoFactorEnabled = false,
                            UserName = "therapist7@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b80c097-edf2-4123-8c8f-93033f70640d",
                            Email = "therapist8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST8@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOSERlyDUrSw0p3mZ/+IfjQxq1MiZU0uUo32on38PspOzhjor/PrQnedU4kSIZrqxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57ccdf53-d154-4612-b6eb-3bcab1c7f15e",
                            TwoFactorEnabled = false,
                            UserName = "therapist8@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca5abf8c-2794-4ca0-92d1-5c1e01ff8846",
                            Email = "therapist9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST9@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJkmQYk93+Rc+19rZYBPBmfiwilUYDsHj9mZDMLVuNWNMxmMVNVaDAPM489oLzwtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b438e2d6-b448-4898-a0cd-d9c7befc455a",
                            TwoFactorEnabled = false,
                            UserName = "therapist9@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffe3c3c8-1b81-4ee0-a439-55fe587877a8",
                            Email = "therapist10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST10@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCUci6J+bVyq5KyUdhpnt3WB5lShniRy2+2JORDzX3p6NBcEF62I4y1bWnF2MLPoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56b0eadb-2c9f-44f2-a2ab-f53abb7ab2ab",
                            TwoFactorEnabled = false,
                            UserName = "therapist10@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74710891-53a1-4938-9406-845bbbcced82",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB5qtnFTkPSLICXcpeUaOJClTyMdvYvW7IKIoiFO3sszkgg/ZA8PJdVB8K8DbpePjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d64dca66-0e18-4809-ba1b-0df245260706",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4e73bb3-8134-42c6-992b-c158b21f66cc",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECVW0iygtcmP0BKCszR3buiGqY0ev0MGuTHt8lQIooHjbUnRbdz6yVPid6g/ktaYoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee69b49c-7dcd-4f79-9499-906304090abf",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0ac028b-15af-4bb6-ab23-4aee030552f6",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyQLTimkPVtHAw3J0EjUV4JCTcm6Fml81/HX2edPJN7DexMxScVetHKn6zcL+Lt2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e45ca34-f6f8-4edd-831c-065e7afd0d09",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d909ad0-287d-44fb-89f1-b8d7cd281a9f",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDX6ha+yMQgVcC37vuRlzw5RJrK98/JhxHIeA4tt1Uy+9adu8rmJ5bLbPF0K0wh0Mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16e7ab99-ffc7-4ab7-8a60-4c00e0e29a88",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "035e9e80-aaeb-4c37-b2ad-cff5faca0a24",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDehFNuPOKZGbXTijeT6BFp+Fm/3H7qTxGWJMQAFWJSfJ+E+q/8rqZpiSDU/ZAjpIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e71f99ac-3a4d-4c29-b0d8-e28d1406fe58",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5c1af1a-766a-4f97-af73-75d80131045b",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7kXyc2PnsL5PJZ2sOqsWFG1Urv3s8xiGhMn0cww6C5VYty9gfmbtzqWd7ZBPEVfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef126781-4551-4c06-b8c2-43c64c905049",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff1158df-d01c-4aa4-a30f-3ff15e5adfb6",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNWXTV+YlIAqYYGoXfSIQ6ZKixFBlWiWjxkJ8bX0etzbUC8+OUzegmsbZRmXDONHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ed4a95a-b564-4de7-9d55-5677b6feb700",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("PatientId");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Had a great day with friends",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Work stress is getting to me",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Feeling calm after meditation",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Feeling down today",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited for upcoming trip",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 8,
                            Notes = "Stressed about work deadline",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 4,
                            Notes = "Angry about argument with friend",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Exhausted from lack of sleep",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with how things are going",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 10,
                            Notes = "Feeling lonely this weekend",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about therapy progress",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 11,
                            Notes = "Confused about my feelings",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Happy about good news",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Anxious about upcoming test",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited to see family",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Calm after yoga session",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Sad about pet being sick",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Tired from work week",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with life right now",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about new treatment",
                            PatientId = 7,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodTypes");

                    b.HasData(
                        new
                        {
                            MoodTypeId = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            MoodTypeId = 2,
                            Name = "Sad"
                        },
                        new
                        {
                            MoodTypeId = 3,
                            Name = "Anxious"
                        },
                        new
                        {
                            MoodTypeId = 4,
                            Name = "Angry"
                        },
                        new
                        {
                            MoodTypeId = 5,
                            Name = "Excited"
                        },
                        new
                        {
                            MoodTypeId = 6,
                            Name = "Calm"
                        },
                        new
                        {
                            MoodTypeId = 7,
                            Name = "Tired"
                        },
                        new
                        {
                            MoodTypeId = 8,
                            Name = "Stressed"
                        },
                        new
                        {
                            MoodTypeId = 9,
                            Name = "Content"
                        },
                        new
                        {
                            MoodTypeId = 10,
                            Name = "Lonely"
                        },
                        new
                        {
                            MoodTypeId = 11,
                            Name = "Confused"
                        },
                        new
                        {
                            MoodTypeId = 12,
                            Name = "Hopeful"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            FirstName = "Alice",
                            LastName = "Smith",
                            UserId = "14"
                        },
                        new
                        {
                            PatientId = 2,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UserId = "15"
                        },
                        new
                        {
                            PatientId = 3,
                            FirstName = "Emily",
                            LastName = "Williams",
                            UserId = "16"
                        },
                        new
                        {
                            PatientId = 4,
                            FirstName = "David",
                            LastName = "Lee",
                            UserId = "17"
                        },
                        new
                        {
                            PatientId = 5,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            UserId = "18"
                        },
                        new
                        {
                            PatientId = 6,
                            FirstName = "James",
                            LastName = "Wilson",
                            UserId = "19"
                        },
                        new
                        {
                            PatientId = 7,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            Bio = "10+ years experience with anxiety disorders",
                            Email = "therapist1@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Specialization = "Cognitive Behavioral Therapy",
                            UserId = "4"
                        },
                        new
                        {
                            TherapistId = 2,
                            Bio = "Specializes in relationship counseling",
                            Email = "therapist2@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            PhoneNumber = "234-567-8901",
                            Specialization = "Family Therapy",
                            UserId = "5"
                        },
                        new
                        {
                            TherapistId = 3,
                            Bio = "Expert in PTSD treatment",
                            Email = "therapist3@example.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "345-678-9012",
                            Specialization = "Trauma Therapy",
                            UserId = "6"
                        },
                        new
                        {
                            TherapistId = 4,
                            Bio = "Works with children and adolescents",
                            Email = "therapist4@example.com",
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            PhoneNumber = "456-789-0123",
                            Specialization = "Child Psychology",
                            UserId = "7"
                        },
                        new
                        {
                            TherapistId = 5,
                            Bio = "Substance abuse specialist",
                            Email = "therapist5@example.com",
                            FirstName = "Robert",
                            LastName = "Miller",
                            PhoneNumber = "567-890-1234",
                            Specialization = "Addiction Counseling",
                            UserId = "8"
                        },
                        new
                        {
                            TherapistId = 6,
                            Bio = "Helps with body image issues",
                            Email = "therapist6@example.com",
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            PhoneNumber = "678-901-2345",
                            Specialization = "Eating Disorders",
                            UserId = "9"
                        },
                        new
                        {
                            TherapistId = 7,
                            Bio = "Relationship expert",
                            Email = "therapist7@example.com",
                            FirstName = "Thomas",
                            LastName = "Moore",
                            PhoneNumber = "789-012-3456",
                            Specialization = "Couples Therapy",
                            UserId = "10"
                        },
                        new
                        {
                            TherapistId = 8,
                            Bio = "Creative approaches to healing",
                            Email = "therapist8@example.com",
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            PhoneNumber = "890-123-4567",
                            Specialization = "Art Therapy",
                            UserId = "11"
                        },
                        new
                        {
                            TherapistId = 9,
                            Bio = "Performance and mental health",
                            Email = "therapist9@example.com",
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            PhoneNumber = "901-234-5678",
                            Specialization = "Sports Psychology",
                            UserId = "12"
                        },
                        new
                        {
                            TherapistId = 10,
                            Bio = "Helping with loss and bereavement",
                            Email = "therapist10@example.com",
                            FirstName = "Emma",
                            LastName = "Thomas",
                            PhoneNumber = "012-345-6789",
                            Specialization = "Grief Counseling",
                            UserId = "13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.HasOne("MentalHealthApp.Models.MoodType", "Mood")
                        .WithMany("MoodEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("MoodEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
