// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20251005002445_none")]
    partial class none
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "0d27fb3d-4fd3-4185-bcee-28ea3fdf3bcc",
                            CurrentStreak = 0,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEISwXH/p/e1IfjSVUvl4y5m+QVBHfPAlN60is9pVngsA0Ush3v1Uuo4fh9cIpgKj/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c40b406-59c9-4469-ad06-74b9d91f1238",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "07deeef4-31d7-48d5-855e-7cbd83bc346e",
                            CurrentStreak = 0,
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjtzTiMz6HXzdKH+ZG0V1s3UU9Bl2/HHL1j2RelqYvzdg967kbTmXNa1TO2QVsg6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ec75caa-b88f-43d1-b768-6cf589a767b3",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "dd50bfa5-fb51-4e08-9cda-c5fd4066e24d",
                            CurrentStreak = 0,
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcgt/VWwt7/wQ1xb48fMazmtkY4Qp7mL2ki2NWvb8S3VcLY1PX9WC87JvKoqyH1OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa21ed13-9042-43af-84e3-3bcf97e870df",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "1603a184-cfa6-4a33-82c6-beb7e4aeb8d8",
                            CurrentStreak = 1,
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastMoodCheckIn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LongestStreak = 2,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKIG1zwOzMo1T8oG9Sy1wgzuYZu2S/yqXTdvaHTaPPwnCJsX3uiWY/vnMdFxNk1Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70469675-cfa1-498d-9e53-2e1560634681",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "4fdd72d7-afd5-41f2-b00c-c9572c0a0914",
                            CurrentStreak = 1,
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastMoodCheckIn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMj76CNh5+sxCSkke4KAS33U/7CnQFzxiIh9Yb3AmRUaueODsiBVkJE4xCGLHA32sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bac8817e-2763-4c78-8e61-7feac87fa378",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "9f5da144-c043-49f9-a49d-b83601e0b972",
                            CurrentStreak = 1,
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastMoodCheckIn = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Williams",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1mQGPF6s/Po70DtFulMCTElY8ew+z9M2y7VrFgwALsDEX1hqwbPdmhJWZ0a/tGsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4386cdd2-3cda-4fda-aa33-1b05cd3ee6ff",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "79d9d1c0-96eb-4352-9f2f-2942e068fe88",
                            CurrentStreak = 1,
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastMoodCheckIn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Lee",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnJIJYQ7letJt/uBQJHz1jfJl1HF81xWuoHia4qle+MP/Xf8Ow0dPTnmW+ypiqTtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f963aea-ea25-4eb3-9354-691a991ea3dd",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "9242a20d-2179-4abd-a78d-ea0c7c52da57",
                            CurrentStreak = 1,
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastMoodCheckIn = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELhnQHbtWh9riAh58ND8MC+V4Pm/UrjFJs02n1dkjn4gFvF9ELlC3j7d5WoqnB4usQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad1f6be9-6c0e-4d91-bed1-b46391837f11",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "c91c22ca-a6ad-431d-aaf2-8cfb44749c67",
                            CurrentStreak = 1,
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastMoodCheckIn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEICCB4xIruCVljmBXOZziZxh4V0138QdYhKJMs+icV72XDH609Nzg6e4uYN/Rhowhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd19c96a-dfe4-480a-a636-ee3c14f32dc2",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "3530cb6a-2b11-4160-9e8a-3380536cce4d",
                            CurrentStreak = 1,
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastMoodCheckIn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBhScdLRXlGgFpfZQdzBAO+A7RCKFx1oYSgmqJKzakJF1UNqHzoZsHsNKniwloZ47w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f056dc04-08a5-4abb-bf56-b8726b2e2be5",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddresseeId = "15",
                            CreatedAt = new DateTime(2025, 9, 25, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7941),
                            RequesterId = "14",
                            RespondedAt = new DateTime(2025, 9, 26, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7981),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AddresseeId = "16",
                            CreatedAt = new DateTime(2025, 9, 27, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7985),
                            RequesterId = "14",
                            RespondedAt = new DateTime(2025, 9, 28, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7987),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AddresseeId = "14",
                            CreatedAt = new DateTime(2025, 9, 30, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7990),
                            RequesterId = "17",
                            RespondedAt = new DateTime(2025, 10, 1, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7991),
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AddresseeId = "17",
                            CreatedAt = new DateTime(2025, 9, 23, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7994),
                            RequesterId = "15",
                            RespondedAt = new DateTime(2025, 9, 24, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7995),
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            AddresseeId = "15",
                            CreatedAt = new DateTime(2025, 10, 3, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7998),
                            RequesterId = "18",
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            AddresseeId = "19",
                            CreatedAt = new DateTime(2025, 9, 20, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8001),
                            RequesterId = "16",
                            RespondedAt = new DateTime(2025, 9, 21, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8003),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            AddresseeId = "16",
                            CreatedAt = new DateTime(2025, 9, 28, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8006),
                            RequesterId = "20",
                            RespondedAt = new DateTime(2025, 9, 29, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8007),
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            AddresseeId = "19",
                            CreatedAt = new DateTime(2025, 9, 26, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8010),
                            RequesterId = "17",
                            RespondedAt = new DateTime(2025, 9, 27, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8011),
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            AddresseeId = "20",
                            CreatedAt = new DateTime(2025, 9, 24, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8015),
                            RequesterId = "18",
                            RespondedAt = new DateTime(2025, 9, 25, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8016),
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            AddresseeId = "20",
                            CreatedAt = new DateTime(2025, 9, 29, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8019),
                            RequesterId = "19",
                            RespondedAt = new DateTime(2025, 9, 30, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8020),
                            Status = 1
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hey Mike! How are you feeling today?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 3, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8065)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Hi Alice! I'm doing okay, just a bit stressed about work. How about you?",
                            IsRead = true,
                            ReceiverId = "14",
                            SenderId = "15",
                            SentAt = new DateTime(2025, 10, 3, 15, 24, 45, 31, DateTimeKind.Local).AddTicks(8069)
                        },
                        new
                        {
                            Id = 3,
                            Content = "I understand. Work has been tough for me too. Want to chat about it?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 3, 17, 24, 45, 31, DateTimeKind.Local).AddTicks(8072)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Emily! I saw your mood entry from yesterday. Are you doing better today?",
                            IsRead = true,
                            ReceiverId = "16",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 4, 1, 24, 45, 31, DateTimeKind.Local).AddTicks(8075)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Thanks for checking in, Alice. I'm feeling much better today! 😊",
                            IsRead = true,
                            ReceiverId = "14",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 4, 3, 24, 45, 31, DateTimeKind.Local).AddTicks(8078)
                        },
                        new
                        {
                            Id = 6,
                            Content = "David, how do you handle stress? I'm really struggling this week.",
                            IsRead = true,
                            ReceiverId = "17",
                            SenderId = "15",
                            SentAt = new DateTime(2025, 10, 2, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8081)
                        },
                        new
                        {
                            Id = 7,
                            Content = "I've been using the breathing exercises on the app. They really help! Want to try them together?",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "17",
                            SentAt = new DateTime(2025, 10, 2, 15, 24, 45, 31, DateTimeKind.Local).AddTicks(8084)
                        },
                        new
                        {
                            Id = 8,
                            Content = "James, I noticed we both had rough days yesterday. Want to support each other today?",
                            IsRead = true,
                            ReceiverId = "19",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 4, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8086)
                        },
                        new
                        {
                            Id = 9,
                            Content = "That would be great, Emily. It helps to know we're not alone in this.",
                            IsRead = true,
                            ReceiverId = "16",
                            SenderId = "19",
                            SentAt = new DateTime(2025, 10, 4, 15, 24, 45, 31, DateTimeKind.Local).AddTicks(8091)
                        },
                        new
                        {
                            Id = 10,
                            Content = "Olivia! I'm so proud of your mood streak! 🎉",
                            IsRead = false,
                            ReceiverId = "20",
                            SenderId = "18",
                            SentAt = new DateTime(2025, 10, 5, 1, 24, 45, 31, DateTimeKind.Local).AddTicks(8093)
                        },
                        new
                        {
                            Id = 11,
                            Content = "How's your pet doing, James? I've been thinking about you both.",
                            IsRead = false,
                            ReceiverId = "19",
                            SenderId = "17",
                            SentAt = new DateTime(2025, 10, 5, 7, 24, 45, 31, DateTimeKind.Local).AddTicks(8096)
                        },
                        new
                        {
                            Id = 12,
                            Content = "Remember to use the breathing exercise if you feel overwhelmed!",
                            IsRead = true,
                            ReceiverId = "15",
                            SenderId = "14",
                            SentAt = new DateTime(2025, 10, 5, 10, 24, 45, 31, DateTimeKind.Local).AddTicks(8099)
                        },
                        new
                        {
                            Id = 13,
                            Content = "Thanks for being such a good friend, Alice. It means a lot.",
                            IsRead = false,
                            ReceiverId = "14",
                            SenderId = "16",
                            SentAt = new DateTime(2025, 10, 5, 12, 24, 45, 31, DateTimeKind.Local).AddTicks(8102)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Had a great day with friends",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Work stress is getting to me",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Feeling calm after meditation",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling down today",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited for upcoming trip",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Stressed about work deadline",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 9, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 3,
                            Notes = "Angry about argument with friend",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Exhausted from lack of sleep",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with how things are going",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling lonely this weekend",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about therapy progress",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Confused about my feelings",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Happy about good news",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Anxious about upcoming test",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited to see family",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Calm after yoga session",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Sad about pet being sick",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Tired from work week",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with life right now",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about new treatment",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ConversationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 10, 3, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8137),
                            IsRead = false,
                            Message = "Sophia sent you a friend request",
                            SenderId = "18",
                            UserId = "15"
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 10, 5, 1, 24, 45, 31, DateTimeKind.Local).AddTicks(8140),
                            IsRead = false,
                            Message = "New message from Sophia",
                            SenderId = "18",
                            UserId = "20"
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 10, 5, 7, 24, 45, 31, DateTimeKind.Local).AddTicks(8142),
                            IsRead = false,
                            Message = "New message from David",
                            SenderId = "17",
                            UserId = "19"
                        },
                        new
                        {
                            NotificationId = 4,
                            CreatedAt = new DateTime(2025, 10, 5, 12, 24, 45, 31, DateTimeKind.Local).AddTicks(8145),
                            IsRead = false,
                            Message = "New message from Emily",
                            SenderId = "16",
                            UserId = "14"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.PlannerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlannerEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8182),
                            Description = "Jog in the park for 30 minutes",
                            EndTime = new DateTime(2025, 10, 5, 6, 30, 0, 0, DateTimeKind.Local),
                            EventType = 4,
                            IsCompleted = false,
                            Priority = 1,
                            StartTime = new DateTime(2025, 10, 5, 6, 0, 0, 0, DateTimeKind.Local),
                            Title = "Morning Jog",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8188),
                            Description = "Weekly online therapy",
                            EndTime = new DateTime(2025, 10, 6, 15, 0, 0, 0, DateTimeKind.Local),
                            EventType = 5,
                            IsCompleted = false,
                            Priority = 2,
                            StartTime = new DateTime(2025, 10, 6, 14, 0, 0, 0, DateTimeKind.Local),
                            Title = "Therapy Session",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8194),
                            Description = "Project planning meeting",
                            EndTime = new DateTime(2025, 10, 5, 11, 0, 0, 0, DateTimeKind.Local),
                            EventType = 3,
                            IsCompleted = false,
                            Priority = 2,
                            StartTime = new DateTime(2025, 10, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Title = "Work Meeting",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8200),
                            Description = "Walk around neighborhood",
                            EndTime = new DateTime(2025, 10, 5, 18, 45, 0, 0, DateTimeKind.Local),
                            EventType = 5,
                            IsCompleted = false,
                            Priority = 0,
                            StartTime = new DateTime(2025, 10, 5, 18, 0, 0, 0, DateTimeKind.Local),
                            Title = "Evening Walk",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8206),
                            Description = "Read for 1 hour before bed",
                            EndTime = new DateTime(2025, 10, 6, 21, 0, 0, 0, DateTimeKind.Local),
                            EventType = 7,
                            IsCompleted = false,
                            Priority = 0,
                            StartTime = new DateTime(2025, 10, 6, 20, 0, 0, 0, DateTimeKind.Local),
                            Title = "Read a Book",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(8211),
                            Description = "Strength training",
                            EndTime = new DateTime(2025, 10, 5, 8, 0, 0, 0, DateTimeKind.Local),
                            EventType = 5,
                            IsCompleted = false,
                            Priority = 1,
                            StartTime = new DateTime(2025, 10, 5, 7, 0, 0, 0, DateTimeKind.Local),
                            Title = "Gym Session",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 32, DateTimeKind.Local).AddTicks(970),
                            Description = "Morning meditation",
                            EndTime = new DateTime(2025, 10, 5, 7, 0, 0, 0, DateTimeKind.Local),
                            EventType = 4,
                            IsCompleted = false,
                            Priority = 1,
                            StartTime = new DateTime(2025, 10, 5, 6, 30, 0, 0, DateTimeKind.Local),
                            Title = "Meditation",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 32, DateTimeKind.Local).AddTicks(989),
                            Description = "Routine check-up",
                            EndTime = new DateTime(2025, 10, 7, 10, 0, 0, 0, DateTimeKind.Local),
                            EventType = 5,
                            IsCompleted = false,
                            Priority = 2,
                            StartTime = new DateTime(2025, 10, 7, 9, 0, 0, 0, DateTimeKind.Local),
                            Title = "Doctor Appointment",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 5, 13, 24, 45, 32, DateTimeKind.Local).AddTicks(994),
                            Description = "Work on homework",
                            EndTime = new DateTime(2025, 10, 5, 18, 0, 0, 0, DateTimeKind.Local),
                            EventType = 0,
                            IsCompleted = false,
                            Priority = 1,
                            StartTime = new DateTime(2025, 10, 5, 16, 0, 0, 0, DateTimeKind.Local),
                            Title = "Study Session",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 10, 3, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7814),
                            Description = "Want to support our cause but rock some swag? This is the perfect choice for you!",
                            ImageUrl = "ShantiShirtMerch.png",
                            IsPrivate = false,
                            Name = "Shanti Black Tee",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 29, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7819),
                            Description = "Get a fun plushy to be your companion!",
                            ImageUrl = "ShantiPlushy.jpg",
                            IsPrivate = false,
                            Name = "Shanti Plushy",
                            Price = 25m
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 30, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7891),
                            Description = "A bestselling book with practical tips for mental wellness.",
                            ImageUrl = "Wellbook.jpg",
                            IsPrivate = false,
                            Name = "Wellness Book - 'Calm Your Mind'",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 9, 21, 13, 24, 45, 31, DateTimeKind.Local).AddTicks(7895),
                            Description = "Includes stress balls, aroma oils, and calming teas.",
                            ImageUrl = "default-product.png",
                            IsPrivate = false,
                            Name = "Stress Relief Kit",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Friendship", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Message", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthApp.Models.PlannerEvent", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
