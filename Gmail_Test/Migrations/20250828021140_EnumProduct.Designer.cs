// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250828021140_EnumProduct")]
    partial class EnumProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "5d43f009-4113-4182-aa18-5d5f36e81ad6",
                            CurrentStreak = 0,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENT/rRJGRROtL5IVDLKLpDg4BQHs7NSTVyHP/9kBJwEvrfhxoXeDx/27h53CVlDsVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc727f4e-3843-4058-9e5e-cc96f63b3aac",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "527df816-51ed-46ab-9f3c-b40acc66083d",
                            CurrentStreak = 0,
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHvpSrbrV1Sf0JXbi1hpnyOlIbupKDElWmQiigK/lHAY+WAjHpdhCqVxPoJaXV8SCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc0b92a3-9cd3-46ff-8e32-af092a1b1f40",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "4cfb2521-e065-4a80-82f8-3b1b916741a0",
                            CurrentStreak = 0,
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDPpaJSNXcWKczXMiLLr3qrYoXbc/ByTQVeX2ip9Mr4/yRz9rhKODmSfIhHn9RKIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bbbeed4-94b2-4f23-b33e-64ac4d0c1c05",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "a2df586e-fd0d-466f-acd6-0cdf1858c25e",
                            CurrentStreak = 1,
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastMoodCheckIn = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LongestStreak = 2,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpoxbq2uy5bzfxfFNL/QYYC12TyAdz2248dH8ef2nC3mUoKAhSX1W+oEJm/X5rIEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb8f8269-4435-4499-b7ce-afbf8bc49bba",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "2c51a1f2-7087-4e19-ac49-1ce24c459852",
                            CurrentStreak = 1,
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastMoodCheckIn = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECp0Om1nYgyIYiKMgvMGw6iCelbNh85lfCe4WkCsdF3bhZvKEW3ZBqqdXwNZui5Pow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64d3f35-49e4-43ef-8fe4-32d790c3547f",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "3ae42a0b-a27a-4c48-9bb7-fd99c990d17b",
                            CurrentStreak = 1,
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastMoodCheckIn = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Williams",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaKquRE6voRVuvvD7g8qDOb/iecczUWaQbFKHS6bsLJ10ZPe9pHDLMBvjax83RJKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81e895d6-fa3a-4b72-a3e8-b3ba19c8acc8",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "9448514a-bc69-4106-a222-9c1fd2ba747e",
                            CurrentStreak = 1,
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastMoodCheckIn = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Lee",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpJn+adxK1pOTl2EUkFUHtnUjD7OBAUZb4yNZgeXxJhTFlUzp5+/g0yy5EjbL36mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19eff93f-335a-4d2d-9a78-498f1020238f",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "91e22e8c-5ddf-4100-8250-3d8fff9cb8cf",
                            CurrentStreak = 1,
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastMoodCheckIn = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEj0K8Z7PNk5Ie2ORjUF+VNWLqAQi+zCwzIGGmzdZ4qWD7mZMAH/6uLsR6yHOcRokg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e57c57f-baa0-45f6-b552-01591d6f4174",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "c1b9d824-b5f1-4185-a1ea-10027a38ff9d",
                            CurrentStreak = 1,
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastMoodCheckIn = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2P6InIvKDW0vhQCHco5FuMZ18Tvzl13Mx6A16kR7DHdPDJbeOSo+tlbIDMvB0qjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa92d3e3-c5e8-4afb-825b-1c764e2df702",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "33b35e7d-a909-42c7-8902-89b2ddf46ffc",
                            CurrentStreak = 1,
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastMoodCheckIn = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSC3Wr0z2cS8SuvgagHzmjFGkSmAZpX2PbfprITYyekQte4UYRtS9RlZvfrH0xFTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb4ab92a-0fef-464a-9799-b1b7e043c0c7",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Had a great day with friends",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Work stress is getting to me",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Feeling calm after meditation",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 8, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling down today",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited for upcoming trip",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Stressed about work deadline",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 8, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 3,
                            Notes = "Angry about argument with friend",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Exhausted from lack of sleep",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with how things are going",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling lonely this weekend",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about therapy progress",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Confused about my feelings",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Happy about good news",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Anxious about upcoming test",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 8, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited to see family",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Calm after yoga session",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Sad about pet being sick",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Tired from work week",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with life right now",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about new treatment",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
