// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    partial class MentalHealthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 4, 7, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Initial consultation",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 4, 8, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Follow-up session",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 4, 7, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Family therapy",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 4, 9, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Couples counseling",
                            PatientId = 4,
                            Status = "Canceled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 4, 8, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Trauma session",
                            PatientId = 5,
                            Status = "Completed",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 4, 10, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "PTSD follow-up",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 4, 7, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Child therapy evaluation",
                            PatientId = 7,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 4, 11, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Adolescent counseling",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentDate = new DateTime(2025, 4, 9, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Addiction counseling",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 4, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Substance abuse follow-up",
                            PatientId = 3,
                            Status = "Rescheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 11,
                            AppointmentDate = new DateTime(2025, 4, 8, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Eating disorder support",
                            PatientId = 4,
                            Status = "Scheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 12,
                            AppointmentDate = new DateTime(2025, 4, 13, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Body image therapy",
                            PatientId = 5,
                            Status = "Rescheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 13,
                            AppointmentDate = new DateTime(2025, 4, 10, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Couples therapy session",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 14,
                            AppointmentDate = new DateTime(2025, 4, 14, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Relationship counseling",
                            PatientId = 7,
                            Status = "Completed",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 15,
                            AppointmentDate = new DateTime(2025, 4, 9, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Art therapy introduction",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 16,
                            AppointmentDate = new DateTime(2025, 4, 15, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Creative expression session",
                            PatientId = 2,
                            Status = "Completed",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 17,
                            AppointmentDate = new DateTime(2025, 4, 11, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Sports performance anxiety",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 18,
                            AppointmentDate = new DateTime(2025, 4, 16, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Competition stress management",
                            PatientId = 4,
                            Status = "Completed",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 19,
                            AppointmentDate = new DateTime(2025, 4, 12, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Grief counseling",
                            PatientId = 5,
                            Status = "Scheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 20,
                            AppointmentDate = new DateTime(2025, 4, 17, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Bereavement support",
                            PatientId = 6,
                            Status = "Rescheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58b17f2c-1111-42e9-b9cd-da6600bbd8a7",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIr3VUgp/B6nYrIbTfs5au3Do1YmhmxQgzl+xODRFjsU4IYgCzZNM+RHvaQjIuftfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e30e107-db2b-4148-9fb9-a7fee6361481",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d104fd7-9faf-4efe-9966-265c1cd56797",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdLCghoKJ0lp4he1oHan0R59cxx2xYKBFfk/ja5HVnzxW71bCnvnYrZyOUHE9NTTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f081ba96-f9d2-4c65-a18b-65b29465c3f7",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9155fb5d-ec9f-46f9-9eb0-d0768e936b11",
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4qfvSNQoaACtb5r524fW9jDFrRuj6WzxbA7YX8g7L/IS/0+XoEPwavPQLZhhz21Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "462304ab-4d08-4bbc-a542-33ae71e9d58d",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9620fab-15d1-48d2-a0cd-09f329875ecc",
                            Email = "therapist1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbWbumNMEAnf2FTjabgvkSf5ulw55tERU0ULLUYZn6ADdfdUZ54+24s5IJnQkK8OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed97d094-60be-45d0-87db-de54954a6795",
                            TwoFactorEnabled = false,
                            UserName = "therapist1@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "021ca50a-6321-4e63-85d3-271d92d6f117",
                            Email = "therapist2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST2@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4LrXa6QPGsWoI4h13feaMcXt633RYJc1GytbEYOY9ub+xsAHtBqfd4pg9rsKSisA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bf6b87a-6c87-412a-846c-d791fe9bda36",
                            TwoFactorEnabled = false,
                            UserName = "therapist2@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "498d552b-8dce-4f31-94d6-3149b3af6019",
                            Email = "therapist3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST3@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENhpHJrBtQ9hr+L8aI/yA9fXatmuTvZULvKGkXoQcXVrwEgpz6/hEQNU7XFtTq1kZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c1c58ad-ebe0-43c3-8219-8cd3e1071a5f",
                            TwoFactorEnabled = false,
                            UserName = "therapist3@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a37d0ba-c044-4344-8fe2-b13bd84a1952",
                            Email = "therapist4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST4@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGxEn6TXYSJ6JIFopvkGpnj/b8a92cw1zMMI7kaz7vPZ2A2IoiQhy5TK461siue4YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eebf72f-b25f-451b-b85b-d057b0928b34",
                            TwoFactorEnabled = false,
                            UserName = "therapist4@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cb3cc12-9bdc-4f8c-aeee-920822c38633",
                            Email = "therapist5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST5@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDKiiH2skk/UE4T1Wb/R9KsU+3k7ydvvDBWhAOBl8YAKGMKuk063kyWldH4cE96vgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd308f66-6584-494f-8387-9a5919f95651",
                            TwoFactorEnabled = false,
                            UserName = "therapist5@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca616afd-5292-4bf2-bcfc-f353a0e7a64f",
                            Email = "therapist6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST6@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEITGI7CV1qZNkAT0f5ttPnDbi6d+Mip+S0RLoqavb48Ivgla1MKZ5fIbBbLr8vKjOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3236a053-b626-44a7-9d1a-a08e3c8cde37",
                            TwoFactorEnabled = false,
                            UserName = "therapist6@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3610be5-9bbb-4eac-b897-351436be3bca",
                            Email = "therapist7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST7@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkFyKeHY5y0fcJJU2okEgltw4+JzFaSnrlU9JZ7Cc5liFox01Ou+mlck4X3a+Nwcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1aa3f30a-37c5-4785-a12a-2e0c9c221aad",
                            TwoFactorEnabled = false,
                            UserName = "therapist7@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c1d2b97-3150-4edb-bce9-68c67dcdf103",
                            Email = "therapist8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST8@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOM4yBKytr53Gnc5XjON4U37rebQFc4LiXF+dSVazEPSvARKx2FzZST+xOFnzXwYQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e9457df-107a-402a-9b40-06457ee50d9d",
                            TwoFactorEnabled = false,
                            UserName = "therapist8@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "225192e0-d865-43e4-8556-e6b5da80701c",
                            Email = "therapist9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST9@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMgUIvImVgf6C39M/x9RJRBYOsfqEUAt7lL0eScgUs1vyDAJxPYSzL8VoJ1aXH4EGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "665566a1-3068-4eba-812f-879055536f4f",
                            TwoFactorEnabled = false,
                            UserName = "therapist9@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c1acc1c-00e1-4a7b-82ae-dc4b0be58140",
                            Email = "therapist10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST10@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBaSGfHlzN/XGPJtievi4+6pnM1wDJM7RSXetgrkMOSLTCnuqrK5745WFkNXmlc+Ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2af916b-a04f-4bf0-91d1-932b6ccbc027",
                            TwoFactorEnabled = false,
                            UserName = "therapist10@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6872e6c1-dd34-44a4-ad16-34aa9764e848",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuT4e4jJBHOeSu8K6O8HIb5/OLarkMPiZL6SgsIWkQlCJ0b8h3QJn3DmJ4b4XN1Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45161591-2591-48fe-9ae0-e37e60ce6ce8",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edfd4f62-15c2-44a8-8720-fdb7bbfcc16c",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBYx3CEp2I7qm1tqME+w0FLzBIOgntbw/FTGCQtiIDDyt11Wrlz3h0Gyk3WkXDT7/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dd11f81-f1ab-4441-9a0f-1282c4d35d12",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1125a80-7b84-40d2-a636-12a21f3067a8",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBRFslw8PCGd8pc98qRc9Eb8pJDbuqJFNFQJFKvRmwJFvGzoxu2CvMw3mv1VAFeHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f22169b-7ebc-4feb-a5ec-cf3f454eb3dd",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acef0e9b-5f4f-40e4-adb1-30ba90c371cf",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8kr18GaC7iajBigkqg9At+K+uUxMcTqzVn8kcpSqykLIG/HBBUK5xneBYWYOLinQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60c84d5c-5cc3-4e09-8264-c3543ce1e109",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45157072-f385-48a5-b760-ead048052e66",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENhopE3a+uJVq68yDgFPL2AW1HoKdDqmOHQaSyBldtAKDiOXp5PS05kOFB6or0m3+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06001a1a-87b9-4dbc-a961-df5e67c69f30",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2881b2b5-cff4-44bf-bb27-58eaca69cad7",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBQqftXQT1ywRU8/KAXZPiSpzIOlQoFO3Y967oS1K3n/XQorkUnBTCDQIuNiyzrFzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65000b28-b7bb-4abd-b630-de30913d44a6",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afe7e68d-e56e-4694-a846-de51eb9ccb26",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1I+uaSut/uO78Byub2F08e873J3zAWs16/0LjJNBuKs144/LK1GdpGPVWTaQboXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "feccb9ff-0885-4001-884a-f7ef30f515c2",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("PatientId");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Had a great day with friends",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Work stress is getting to me",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Feeling calm after meditation",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Feeling down today",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited for upcoming trip",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 8,
                            Notes = "Stressed about work deadline",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 4,
                            Notes = "Angry about argument with friend",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Exhausted from lack of sleep",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with how things are going",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 10,
                            Notes = "Feeling lonely this weekend",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about therapy progress",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 11,
                            Notes = "Confused about my feelings",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Happy about good news",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Anxious about upcoming test",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited to see family",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Calm after yoga session",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Sad about pet being sick",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Tired from work week",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with life right now",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about new treatment",
                            PatientId = 7,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodTypes");

                    b.HasData(
                        new
                        {
                            MoodTypeId = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            MoodTypeId = 2,
                            Name = "Sad"
                        },
                        new
                        {
                            MoodTypeId = 3,
                            Name = "Anxious"
                        },
                        new
                        {
                            MoodTypeId = 4,
                            Name = "Angry"
                        },
                        new
                        {
                            MoodTypeId = 5,
                            Name = "Excited"
                        },
                        new
                        {
                            MoodTypeId = 6,
                            Name = "Calm"
                        },
                        new
                        {
                            MoodTypeId = 7,
                            Name = "Tired"
                        },
                        new
                        {
                            MoodTypeId = 8,
                            Name = "Stressed"
                        },
                        new
                        {
                            MoodTypeId = 9,
                            Name = "Content"
                        },
                        new
                        {
                            MoodTypeId = 10,
                            Name = "Lonely"
                        },
                        new
                        {
                            MoodTypeId = 11,
                            Name = "Confused"
                        },
                        new
                        {
                            MoodTypeId = 12,
                            Name = "Hopeful"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            FirstName = "Alice",
                            LastName = "Smith",
                            UserId = "14"
                        },
                        new
                        {
                            PatientId = 2,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UserId = "15"
                        },
                        new
                        {
                            PatientId = 3,
                            FirstName = "Emily",
                            LastName = "Williams",
                            UserId = "16"
                        },
                        new
                        {
                            PatientId = 4,
                            FirstName = "David",
                            LastName = "Lee",
                            UserId = "17"
                        },
                        new
                        {
                            PatientId = 5,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            UserId = "18"
                        },
                        new
                        {
                            PatientId = 6,
                            FirstName = "James",
                            LastName = "Wilson",
                            UserId = "19"
                        },
                        new
                        {
                            PatientId = 7,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProductEntity");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            Bio = "10+ years experience with anxiety disorders",
                            Email = "therapist1@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Specialization = "Cognitive Behavioral Therapy",
                            UserId = "4"
                        },
                        new
                        {
                            TherapistId = 2,
                            Bio = "Specializes in relationship counseling",
                            Email = "therapist2@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            PhoneNumber = "234-567-8901",
                            Specialization = "Family Therapy",
                            UserId = "5"
                        },
                        new
                        {
                            TherapistId = 3,
                            Bio = "Expert in PTSD treatment",
                            Email = "therapist3@example.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "345-678-9012",
                            Specialization = "Trauma Therapy",
                            UserId = "6"
                        },
                        new
                        {
                            TherapistId = 4,
                            Bio = "Works with children and adolescents",
                            Email = "therapist4@example.com",
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            PhoneNumber = "456-789-0123",
                            Specialization = "Child Psychology",
                            UserId = "7"
                        },
                        new
                        {
                            TherapistId = 5,
                            Bio = "Substance abuse specialist",
                            Email = "therapist5@example.com",
                            FirstName = "Robert",
                            LastName = "Miller",
                            PhoneNumber = "567-890-1234",
                            Specialization = "Addiction Counseling",
                            UserId = "8"
                        },
                        new
                        {
                            TherapistId = 6,
                            Bio = "Helps with body image issues",
                            Email = "therapist6@example.com",
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            PhoneNumber = "678-901-2345",
                            Specialization = "Eating Disorders",
                            UserId = "9"
                        },
                        new
                        {
                            TherapistId = 7,
                            Bio = "Relationship expert",
                            Email = "therapist7@example.com",
                            FirstName = "Thomas",
                            LastName = "Moore",
                            PhoneNumber = "789-012-3456",
                            Specialization = "Couples Therapy",
                            UserId = "10"
                        },
                        new
                        {
                            TherapistId = 8,
                            Bio = "Creative approaches to healing",
                            Email = "therapist8@example.com",
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            PhoneNumber = "890-123-4567",
                            Specialization = "Art Therapy",
                            UserId = "11"
                        },
                        new
                        {
                            TherapistId = 9,
                            Bio = "Performance and mental health",
                            Email = "therapist9@example.com",
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            PhoneNumber = "901-234-5678",
                            Specialization = "Sports Psychology",
                            UserId = "12"
                        },
                        new
                        {
                            TherapistId = 10,
                            Bio = "Helping with loss and bereavement",
                            Email = "therapist10@example.com",
                            FirstName = "Emma",
                            LastName = "Thomas",
                            PhoneNumber = "012-345-6789",
                            Specialization = "Grief Counseling",
                            UserId = "13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.HasOne("MentalHealthApp.Models.MoodType", "Mood")
                        .WithMany("MoodEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("MoodEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
