// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    partial class MentalHealthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 6, 11, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Initial consultation",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 6, 12, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Follow-up session",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 1,
                            UpdatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 6, 11, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Family therapy",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 6, 13, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Couples counseling",
                            PatientId = 4,
                            Status = "Canceled",
                            TherapistId = 2,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 6, 12, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Trauma session",
                            PatientId = 5,
                            Status = "Completed",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 6, 14, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "PTSD follow-up",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 3,
                            UpdatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 6, 11, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 45,
                            Notes = "Child therapy evaluation",
                            PatientId = 7,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 6, 15, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Adolescent counseling",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 4,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentDate = new DateTime(2025, 6, 13, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Addiction counseling",
                            PatientId = 2,
                            Status = "Scheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 6, 16, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Substance abuse follow-up",
                            PatientId = 3,
                            Status = "Rescheduled",
                            TherapistId = 5,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 11,
                            AppointmentDate = new DateTime(2025, 6, 12, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Eating disorder support",
                            PatientId = 4,
                            Status = "Scheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 12,
                            AppointmentDate = new DateTime(2025, 6, 17, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Body image therapy",
                            PatientId = 5,
                            Status = "Rescheduled",
                            TherapistId = 6,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 13,
                            AppointmentDate = new DateTime(2025, 6, 14, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Couples therapy session",
                            PatientId = 6,
                            Status = "Scheduled",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 14,
                            AppointmentDate = new DateTime(2025, 6, 18, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Relationship counseling",
                            PatientId = 7,
                            Status = "Completed",
                            TherapistId = 7,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 15,
                            AppointmentDate = new DateTime(2025, 6, 13, 9, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Art therapy introduction",
                            PatientId = 1,
                            Status = "Scheduled",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 16,
                            AppointmentDate = new DateTime(2025, 6, 19, 11, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Creative expression session",
                            PatientId = 2,
                            Status = "Completed",
                            TherapistId = 8,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 17,
                            AppointmentDate = new DateTime(2025, 6, 15, 10, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Sports performance anxiety",
                            PatientId = 3,
                            Status = "Scheduled",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 18,
                            AppointmentDate = new DateTime(2025, 6, 20, 15, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Competition stress management",
                            PatientId = 4,
                            Status = "Completed",
                            TherapistId = 9,
                            UpdatedAt = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 19,
                            AppointmentDate = new DateTime(2025, 6, 16, 14, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 90,
                            Notes = "Grief counseling",
                            PatientId = 5,
                            Status = "Scheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 20,
                            AppointmentDate = new DateTime(2025, 6, 21, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DurationMinutes = 60,
                            Notes = "Bereavement support",
                            PatientId = 6,
                            Status = "Rescheduled",
                            TherapistId = 10,
                            UpdatedAt = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25f7beb4-52e1-4e96-92d5-0bbf27e4d3a3",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZa4vmLjhAc8fXG5Mz7LdC+SO9q82Cce5sWCC8dij6M4Y4SYtkTTqsqvGymYanE+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d8b5cc1-bfff-4df9-8019-dac49e469e54",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7902a04-fb69-44ad-9cfb-2e956f859dbe",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnVwhkufzss8QF1lgrVV8BDxipxVosgeWcKu9o6aP3BHt79rRWTNT1JQdgBTjj5rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99f81f13-c28b-49f1-a864-05e680f7b9b1",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebec60a6-e493-4d06-982a-270c16ea85d1",
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMeuRIgyN+ApIG/BT7iYEE0bVWGxHG8H+hia3raVpeSmZJIzIw38d+LzKqYH/UphrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67805fcd-2791-476e-943c-a425c2870f74",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f007868-61db-4bc9-97c2-42d91b6752de",
                            Email = "therapist1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST1@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENz+whnDds0OaO26HihawJRMsoYN8qYW+qqJeOx3viBZQmhhTELrICeiJM0/ABVpew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a363305-7a9c-49da-8215-ee6dafde7f65",
                            TwoFactorEnabled = false,
                            UserName = "therapist1@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f69f9391-c291-4ec1-bf4b-4a2f17ca4633",
                            Email = "therapist2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST2@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBicOjCjf0Q2gSVB1rrwkoetJ05Xd03iguD+wyU/wBX/ZndEOBDyLHBh5q+U+iTceg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "059dcd61-723c-474a-a5cf-b988272dcb29",
                            TwoFactorEnabled = false,
                            UserName = "therapist2@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dce8cfff-0a0e-465f-880e-cf67f066b283",
                            Email = "therapist3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST3@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+CmMYBAst/KIg29n6Hc2lcEtJmtB8mBqHClpaWgtazv7EcxitIfY2oxAYNe1OgYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16ac0659-7039-4941-b152-4137c9e3ece0",
                            TwoFactorEnabled = false,
                            UserName = "therapist3@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3319cb6-4db0-47c2-a1b0-7c6d0fc90b90",
                            Email = "therapist4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST4@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGlnCr11OoC2LoRkXTgCS5amT2CbMP2qARj/+4GyjvYvD+r5+nfhD3WdMPoLfcbhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b5bef60-d1f4-4131-b302-cc3d1dcc1c3c",
                            TwoFactorEnabled = false,
                            UserName = "therapist4@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1038812-c620-45e1-b1b1-0568f67900e2",
                            Email = "therapist5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST5@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFnFJRM9TmHYcndPaLh0XU/OOG2qm0wJlgxZgtr8T446oIGgVfqMgX7Hs2R647lXxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a95f4e4-f0b0-42fd-93d5-ee9cb51674d5",
                            TwoFactorEnabled = false,
                            UserName = "therapist5@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05c6c849-da63-47e5-91f1-d19de7ec6125",
                            Email = "therapist6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST6@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5dy5dIpRGuWzv4ZYaKF/p7nI/rWgK/oR07+Zv3KPhAp6t3XOaPrubiExWU0nMmKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "296e4c2a-0fcb-4e72-834d-5ced59a2d896",
                            TwoFactorEnabled = false,
                            UserName = "therapist6@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c73a7d68-0e7d-458c-be7a-b50016820c4c",
                            Email = "therapist7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST7@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDL8T6ca94nmgTuaRyaDALCjznU7x2K+l9M+nY/Z43RsJQvZJeZ+nQop1u6nCmRO/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4ca2b4f-9184-4d14-9930-df460af7a753",
                            TwoFactorEnabled = false,
                            UserName = "therapist7@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4629b5a-9881-4cdb-b18d-0f982d98aa47",
                            Email = "therapist8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST8@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZaRvnGj202W1d/zY4/Qr88MWAoFPGKLrTIZo9/Y+J44jc1FJOoxdBBdQa8LudUSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "584ea6ca-803b-4495-ae72-e16b66bd4862",
                            TwoFactorEnabled = false,
                            UserName = "therapist8@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7adf9cf-694c-4f68-ae2f-afbfabcfd76b",
                            Email = "therapist9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST9@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDf71uR+ZmrJizkP1rBp2o4mxwWjvv6IApecfxu3VoG/CjBwYRiJ1zSm+TaZVVWHVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a6d0b03-0f9e-4198-a1dc-38221549a189",
                            TwoFactorEnabled = false,
                            UserName = "therapist9@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfcd270d-2411-49cd-b5b6-ec39e28b4ad5",
                            Email = "therapist10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Thomas",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERAPIST10@EXAMPLE.COM",
                            NormalizedUserName = "THERAPIST10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtwOkMmNS9E5YaGfmLsIo90T8I+smOTq2KIR99v9Jn+tMu0xB207am0SvzHcgDTIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19587d42-9df7-4ff7-a572-fd67bec2c1c7",
                            TwoFactorEnabled = false,
                            UserName = "therapist10@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02126ee0-8972-445b-87b9-4aa4f0927586",
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDboKd+edGE8bL3GGrg4G/dCTs8RRknOE+f/TSpjx/zxHvU4iWQ5KSGZdAMUgH7A/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71bab9bf-0a1d-4c45-bfea-1acff24c0f53",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3b01956-ce0f-412b-b027-ebd7d35319a2",
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFciPYq1NJcug9Z3H7YJLsseHCKFS3wpT59FR8McAjMorvvTXkRq9cBI1eH5WsfcJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62cb9bf2-89f7-4d31-b1b1-256d9e02f40a",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b7ffe42-479c-438b-93ad-87aa7405ba15",
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEYPE+REyJUvIpd5oGLiL1h52I1gDYlH5hd5TEa9zbmyI5vNhN9gY0CTmiUCNyM3uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2d83c32-ac51-4c0f-8624-a065c9f9e09e",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "787fab5a-b157-4d2d-8dc2-857762d958ed",
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDf/opbUjLr9SQ9fKOAOtiu2gg3guL1topD2igdEmt4YqjGD0MkFuVIPCqBDu+/EWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8ae8644-dcd7-4efa-8a50-1d05feb761f8",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ca94306-cf5a-4cf0-a07d-7828c5f8d8c1",
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGqOd3/22FFSnzN0IP2mrWEjyIEznkpMHB8O5Kdd8y1EJnW8uD/VuqN5ybah1YdsUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea0ae00e-eb2d-4a61-ac83-b0514f5523c0",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a712e0e4-8770-4ce8-9fcd-c6a4540d3118",
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6dKiaEbMf0sb4c4dHNHT9nNDuRvPh0E66u2c2j6x0bs8zZQMCk7CubL6xYJkNBog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a80c921b-22e0-4282-84c7-ef8d5378a30a",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d858c77a-2bc4-448d-84f7-07ee40398ffd",
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGYYHvWvQ94BjJL8tZJrvhijsvH1NQuPrAGiuaJPgqMu9vkzIQVMG4FKHdMy7+0ULg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a2dc4ac-0b9b-418f-a47a-6d64bf1f257a",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("PatientId");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Had a great day with friends",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Work stress is getting to me",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Feeling calm after meditation",
                            PatientId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Feeling down today",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited for upcoming trip",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 8,
                            Notes = "Stressed about work deadline",
                            PatientId = 2,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 4,
                            Notes = "Angry about argument with friend",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Exhausted from lack of sleep",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with how things are going",
                            PatientId = 3,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 10,
                            Notes = "Feeling lonely this weekend",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about therapy progress",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 11,
                            Notes = "Confused about my feelings",
                            PatientId = 4,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 1,
                            Notes = "Happy about good news",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 3,
                            Notes = "Anxious about upcoming test",
                            PatientId = 5,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 5,
                            Notes = "Excited to see family",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 6,
                            Notes = "Calm after yoga session",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 2,
                            Notes = "Sad about pet being sick",
                            PatientId = 6,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 7,
                            Notes = "Tired from work week",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 9,
                            Notes = "Content with life right now",
                            PatientId = 7,
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MoodId = 12,
                            Notes = "Hopeful about new treatment",
                            PatientId = 7,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodTypes");

                    b.HasData(
                        new
                        {
                            MoodTypeId = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            MoodTypeId = 2,
                            Name = "Sad"
                        },
                        new
                        {
                            MoodTypeId = 3,
                            Name = "Anxious"
                        },
                        new
                        {
                            MoodTypeId = 4,
                            Name = "Angry"
                        },
                        new
                        {
                            MoodTypeId = 5,
                            Name = "Excited"
                        },
                        new
                        {
                            MoodTypeId = 6,
                            Name = "Calm"
                        },
                        new
                        {
                            MoodTypeId = 7,
                            Name = "Tired"
                        },
                        new
                        {
                            MoodTypeId = 8,
                            Name = "Stressed"
                        },
                        new
                        {
                            MoodTypeId = 9,
                            Name = "Content"
                        },
                        new
                        {
                            MoodTypeId = 10,
                            Name = "Lonely"
                        },
                        new
                        {
                            MoodTypeId = 11,
                            Name = "Confused"
                        },
                        new
                        {
                            MoodTypeId = 12,
                            Name = "Hopeful"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            FirstName = "Alice",
                            LastName = "Smith",
                            UserId = "14"
                        },
                        new
                        {
                            PatientId = 2,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UserId = "15"
                        },
                        new
                        {
                            PatientId = 3,
                            FirstName = "Emily",
                            LastName = "Williams",
                            UserId = "16"
                        },
                        new
                        {
                            PatientId = 4,
                            FirstName = "David",
                            LastName = "Lee",
                            UserId = "17"
                        },
                        new
                        {
                            PatientId = 5,
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            UserId = "18"
                        },
                        new
                        {
                            PatientId = 6,
                            FirstName = "James",
                            LastName = "Wilson",
                            UserId = "19"
                        },
                        new
                        {
                            PatientId = 7,
                            FirstName = "Olivia",
                            LastName = "Martinez",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProductEntities");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            Bio = "10+ years experience with anxiety disorders",
                            Email = "therapist1@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Specialization = "Cognitive Behavioral Therapy",
                            UserId = "4"
                        },
                        new
                        {
                            TherapistId = 2,
                            Bio = "Specializes in relationship counseling",
                            Email = "therapist2@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            PhoneNumber = "234-567-8901",
                            Specialization = "Family Therapy",
                            UserId = "5"
                        },
                        new
                        {
                            TherapistId = 3,
                            Bio = "Expert in PTSD treatment",
                            Email = "therapist3@example.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "345-678-9012",
                            Specialization = "Trauma Therapy",
                            UserId = "6"
                        },
                        new
                        {
                            TherapistId = 4,
                            Bio = "Works with children and adolescents",
                            Email = "therapist4@example.com",
                            FirstName = "Jennifer",
                            LastName = "Davis",
                            PhoneNumber = "456-789-0123",
                            Specialization = "Child Psychology",
                            UserId = "7"
                        },
                        new
                        {
                            TherapistId = 5,
                            Bio = "Substance abuse specialist",
                            Email = "therapist5@example.com",
                            FirstName = "Robert",
                            LastName = "Miller",
                            PhoneNumber = "567-890-1234",
                            Specialization = "Addiction Counseling",
                            UserId = "8"
                        },
                        new
                        {
                            TherapistId = 6,
                            Bio = "Helps with body image issues",
                            Email = "therapist6@example.com",
                            FirstName = "Lisa",
                            LastName = "Wilson",
                            PhoneNumber = "678-901-2345",
                            Specialization = "Eating Disorders",
                            UserId = "9"
                        },
                        new
                        {
                            TherapistId = 7,
                            Bio = "Relationship expert",
                            Email = "therapist7@example.com",
                            FirstName = "Thomas",
                            LastName = "Moore",
                            PhoneNumber = "789-012-3456",
                            Specialization = "Couples Therapy",
                            UserId = "10"
                        },
                        new
                        {
                            TherapistId = 8,
                            Bio = "Creative approaches to healing",
                            Email = "therapist8@example.com",
                            FirstName = "Nancy",
                            LastName = "Taylor",
                            PhoneNumber = "890-123-4567",
                            Specialization = "Art Therapy",
                            UserId = "11"
                        },
                        new
                        {
                            TherapistId = 9,
                            Bio = "Performance and mental health",
                            Email = "therapist9@example.com",
                            FirstName = "Kevin",
                            LastName = "Anderson",
                            PhoneNumber = "901-234-5678",
                            Specialization = "Sports Psychology",
                            UserId = "12"
                        },
                        new
                        {
                            TherapistId = 10,
                            Bio = "Helping with loss and bereavement",
                            Email = "therapist10@example.com",
                            FirstName = "Emma",
                            LastName = "Thomas",
                            PhoneNumber = "012-345-6789",
                            Specialization = "Grief Counseling",
                            UserId = "13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MentalHealthApp.Models.Appointment", b =>
                {
                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Therapist", "Therapist")
                        .WithMany("Appointments")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.HasOne("MentalHealthApp.Models.MoodType", "Mood")
                        .WithMany("MoodEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.Patient", "Patient")
                        .WithMany("MoodEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodType", b =>
                {
                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Therapist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
