// <auto-generated />
using System;
using MentalHealthApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthApp.Migrations
{
    [DbContext(typeof(MentalHealthContext))]
    [Migration("20250912065140_correctProductImages")]
    partial class correctProductImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthApp.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoodCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "281ede18-fc5f-46a4-bad4-c34a016f7ab6",
                            CurrentStreak = 0,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLXgQcLX+hmO5Jx2AjXu30Xw93cnzbKiyEngbJkPJUcL8nH16lxMBGCYdVd4qTW5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9af32feb-e22d-4aa6-a550-a2c247addb9e",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "1eeeef10-4ecc-4b84-a78c-99584b667cb4",
                            CurrentStreak = 0,
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELFWhKggNgfu9WDm3Iy5mghD+258Ybs8knkBgaDnlXVRjQEmOeEdFh2UCGZbqKcoUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6545027f-5a05-4829-b28a-77094d001aa6",
                            TwoFactorEnabled = false,
                            UserName = "admin2@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Badge = "None",
                            ConcurrencyStamp = "5241a06d-39fa-4030-8036-a50e7f122dc2",
                            CurrentStreak = 0,
                            Email = "admin3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LongestStreak = 0,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4s89JVhRCyK/vyekyWAoxTRpxOlQ3zUWbmQ1uMIg6mAzbOwbG3SlQb2lfbmPXzIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82400680-5469-401c-9ada-9a1b7397b5c4",
                            TwoFactorEnabled = false,
                            UserName = "admin3@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "4bb20704-8e08-47af-9d89-7ad5ab159338",
                            CurrentStreak = 1,
                            Email = "patient1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LongestStreak = 2,
                            NormalizedEmail = "PATIENT1@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM6bZ+JPWYkiZlS04yAUeC12vKEGdGKoVhgtT2lkHy5bRoHqzMpQOPPTQ32+qucvnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3eaf5b06-842a-4bef-a61d-0f68fc4c97e5",
                            TwoFactorEnabled = false,
                            UserName = "patient1@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "bea05461-968f-4361-9777-dc2777fbd2d5",
                            CurrentStreak = 1,
                            Email = "patient2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT2@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIxSbZ7ntIZEtYifnXBkIs8+rFcQypzPThvJR6yq6yca2kZLdqyGXRBiq04AbOtNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "998cc952-f8a3-4098-80eb-e5519f52f42d",
                            TwoFactorEnabled = false,
                            UserName = "patient2@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "7151f3af-2619-4e32-8b77-609c6c7e22f9",
                            CurrentStreak = 1,
                            Email = "patient3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastMoodCheckIn = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Williams",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT3@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEaRbyRLzk9TEg1C0nQm8BdhPXfDH5bNegWBsFytacvXGANm3eywzQdf0IOG6IKf/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63b88e06-ea42-4e26-920f-a1288cffcd47",
                            TwoFactorEnabled = false,
                            UserName = "patient3@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "e861c319-cff9-47f8-b28a-fb1ee0896422",
                            CurrentStreak = 1,
                            Email = "patient4@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Lee",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT4@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPudUdhhXQ5HxAQOuL/Uo5Yc0KP1L63X68OP4bo1IA5G+ssGFSxH1/N2Ptab8oMdcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07dc22ca-5176-4a51-bf20-b6d9bf1218c5",
                            TwoFactorEnabled = false,
                            UserName = "patient4@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "9479b20e-6440-4b08-8fca-ff37b99fc1f8",
                            CurrentStreak = 1,
                            Email = "patient5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastMoodCheckIn = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT5@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8/hAYzS3E8mosX6bxuttc90htDBMHHHqaHTkXlXKW43kCry8AcZD62nGzWO2uZ6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0b38798-4279-4d1d-b7d7-b5f32aa4bc38",
                            TwoFactorEnabled = false,
                            UserName = "patient5@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "e402e0c4-4e9f-45b6-bcfd-db94c64a07e8",
                            CurrentStreak = 1,
                            Email = "patient6@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT6@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECV9wsz5OfPmUbR/9ImoJOaOJAZi8PQuikLcH5hbkxVTKdqt9RCWpEtDWgMkQ/nvzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db53a4cb-d972-48cd-85f8-1a545f08f20d",
                            TwoFactorEnabled = false,
                            UserName = "patient6@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            Badge = "Bronze",
                            ConcurrencyStamp = "77837703-b428-43fb-b903-3d41f2660d7f",
                            CurrentStreak = 1,
                            Email = "patient7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            LastMoodCheckIn = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            LongestStreak = 1,
                            NormalizedEmail = "PATIENT7@EXAMPLE.COM",
                            NormalizedUserName = "PATIENT7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3Muk99yPA1CFWeI+ZvuuApLYydekwEeWFgHXvb4CFz6PdkcFI0dDtWpqIIk05ouQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "625d5f84-c5f5-4abc-97d7-1d9409a80918",
                            TwoFactorEnabled = false,
                            UserName = "patient7@example.com"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.MoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Had a great day with friends",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Work stress is getting to me",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Feeling calm after meditation",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 9, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling down today",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited for upcoming trip",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Stressed about work deadline",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 3,
                            Notes = "Angry about argument with friend",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Exhausted from lack of sleep",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with how things are going",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Feeling lonely this weekend",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about therapy progress",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Confused about my feelings",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Happy about good news",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Anxious about upcoming test",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 9, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 5,
                            Notes = "Excited to see family",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Calm after yoga session",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 2,
                            Notes = "Sad about pet being sick",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 4,
                            Notes = "Tired from work week",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 6,
                            Notes = "Content with life right now",
                            UserId = "20"
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Mood = 1,
                            Notes = "Hopeful about new treatment",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("MentalHealthApp.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MentalHealthApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 10, 18, 51, 39, 336, DateTimeKind.Local).AddTicks(5878),
                            Description = "Want to support our cause but rock some swag? This is the perfect choice for you!",
                            ImageUrl = "ShantiShirtMerch.png",
                            IsPrivate = false,
                            Name = "Shanti Black Tee",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            CreatedAt = new DateTime(2025, 9, 6, 18, 51, 39, 336, DateTimeKind.Local).AddTicks(5882),
                            Description = "Get a fun plushy to be your companion!",
                            ImageUrl = "ShantiPlushy.jpg",
                            IsPrivate = false,
                            Name = "Shanti Plushy",
                            Price = 25m
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 7, 7, 18, 51, 39, 336, DateTimeKind.Local).AddTicks(5890),
                            Description = "A bestselling book with practical tips for mental wellness.",
                            ImageUrl = "Wellbook.jpg",
                            IsPrivate = false,
                            Name = "Wellness Book - 'Calm Your Mind'",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 8, 29, 18, 51, 39, 336, DateTimeKind.Local).AddTicks(5896),
                            Description = "Includes stress balls, aroma oils, and calming teas.",
                            ImageUrl = "default-product.png",
                            IsPrivate = false,
                            Name = "Stress Relief Kit",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthApp.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
